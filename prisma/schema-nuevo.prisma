generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =====================================================================
// PLANES DE SUSCRIPCIÓN SAAS
// =====================================================================

model Plan {
  id                   String  @id @default(cuid())
  name                 String  // "Starter", "Professional", "Enterprise"
  slug                 String  @unique // "starter", "professional", "enterprise"
  active_project_limit Int     // 5, 15, 50
  price_monthly        Decimal // 29, 79, 199
  price_yearly         Decimal // 290, 790, 1990 (con descuento)
  features             Json    // Lista de características del plan
  stripe_price_id      String? // ID del precio en Stripe
  active               Boolean @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relaciones
  studios Studio[]

  @@map("plans")
}

// =====================================================================
// ESTUDIOS (CLIENTES DE LA PLATAFORMA SAAS)
// =====================================================================

model Studio {
  id              String   @id @default(cuid())
  name            String   // Nombre del estudio
  slug            String   @unique // URL slug para subdominios
  email           String   @unique // Email principal del estudio
  phone           String?
  address         String?
  website         String?
  logo_url        String?
  
  // Suscripción
  plan_id         String
  plan            Plan     @relation(fields: [plan_id], references: [id])
  subscription_status String @default("trial") // trial, active, past_due, canceled
  subscription_start  DateTime?
  subscription_end    DateTime?
  stripe_customer_id  String? @unique
  stripe_subscription_id String? @unique
  
  // Configuración Stripe Connect
  stripe_account_id   String? @unique // Para pagos directos al studio
  stripe_onboarding_complete Boolean @default(false)
  
  // Configuración de comisiones
  commission_rate     Decimal @default(0.30) // 30% para ProSocial por defecto
  
  // Metadatos
  active          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // === RELACIONES CON MODELOS MIGRADOS ===
  users                StudioUser[]
  clientes            Cliente[]
  eventos             Evento[]
  cotizaciones        Cotizacion[]
  servicios           Servicio[]
  paquetes            Paquete[]
  configuraciones     Configuracion[]
  metodosPago         MetodoPago[]
  condicionesComerciales CondicionesComerciales[]
  campanias           Campania[]
  agenda              Agenda[]
  nominas             Nomina[]
  gastos              Gasto[]
  negocios            Negocio[]
  revenue_transactions RevenueTransaction[]

  @@map("studios")
  @@index([slug])
  @@index([plan_id])
}

// =====================================================================
// USUARIOS DEL SISTEMA (MULTI-TENANT)
// =====================================================================

model StudioUser {
  id        String   @id @default(cuid())
  
  // Información básica
  username  String?
  email     String   @unique
  password  String
  role      String   @default("user") // owner, admin, user, photographer, editor
  telefono  String?
  status    String   @default("inactive") // active, inactive, pending
  
  // Relación con Studio
  studio_id String
  studio    Studio   @relation(fields: [studio_id], references: [id])
  
  // Metadatos
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  // === RELACIONES MIGRADAS ===
  sesiones            Sesion[]
  agenda              Agenda[]
  pagos               Pago[]
  eventos             Evento[]
  cotizacionServicios CotizacionServicio[]
  
  // === RELACIONES NOMINA ===
  nominas             Nomina[]              @relation("NominaUsuario")
  nominasAutorizadas  Nomina[]              @relation("AutorizadoPor")
  nominasPagadas      Nomina[]              @relation("PagadoPor")
  
  // === RELACIONES GASTOS ===
  gastos              Gasto[]

  @@map("studio_users")
  @@index([studio_id, status])
  @@index([email])
}

// =====================================================================
// TRANSACCIONES DE INGRESOS (REVENUE SHARE)
// =====================================================================

model RevenueTransaction {
  id                    String   @id @default(cuid())
  studio_id             String
  studio                Studio   @relation(fields: [studio_id], references: [id])
  
  // Información de la transacción
  payment_id            String   // ID del pago que generó esta transacción
  amount_total          Decimal  // Monto total del pago
  prosocial_commission  Decimal  // Comisión para ProSocial
  studio_amount         Decimal  // Monto para el Studio
  commission_rate       Decimal  // Tasa de comisión aplicada
  
  // Detalles
  description           String?
  transaction_date      DateTime @default(now())
  status               String   @default("pending") // pending, completed, failed
  
  // Metadatos de Stripe
  stripe_transfer_id   String?  // ID de la transferencia a studio
  stripe_fee           Decimal? // Comisión de Stripe
  
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("revenue_transactions")
  @@index([studio_id, transaction_date])
  @@index([status])
}

// =====================================================================
// MODELOS MIGRADOS CON ADAPTACIÓN MULTI-TENANT
// =====================================================================

model Sesion {
  id        String     @id @default(cuid())
  userId    String
  User      StudioUser @relation(fields: [userId], references: [id])
  token     String     @unique
  status    String     @default("active")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("sesiones")
}

model Cliente {
  id        String   @id @default(cuid())
  
  // Relación con Studio
  studio_id String
  studio    Studio   @relation(fields: [studio_id], references: [id])
  
  nombre    String
  email     String?
  telefono  String?
  direccion String?
  status    String   @default("activo") //prospecto, cliente
  canalId   String?
  Canal     Canal?   @relation(fields: [canalId], references: [id])
  userId    String?
  
  // Campos para autenticación cliente
  passwordHash    String?   // null hasta onboarding
  emailVerified   Boolean   @default(false)
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Evento    Evento[]
  Pago      Pago[]
  Suscripcion Suscripcion?

  @@map("clientes")
  @@index([studio_id, status])
  @@index([telefono])
}

model Evento {
  id           String      @id @default(cuid())
  
  // Relación con Studio
  studio_id    String
  studio       Studio      @relation(fields: [studio_id], references: [id])
  
  clienteId    String
  Cliente      Cliente     @relation(fields: [clienteId], references: [id])
  eventoTipoId String?
  EventoTipo   EventoTipo? @relation(fields: [eventoTipoId], references: [id])
  nombre       String?     @default("Pendiente")
  fecha_evento DateTime
  sede         String?
  direccion    String?
  status       String      @default("active")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  userId String?
  User   StudioUser? @relation(fields: [userId], references: [id])

  eventoEtapaId String?
  EventoEtapa   EventoEtapa? @relation(fields: [eventoEtapaId], references: [id])

  EventoBitacora EventoBitacora[]
  Cotizacion     Cotizacion[]
  Agenda         Agenda[]
  Nomina         Nomina[]
  Gasto          Gasto[]

  @@map("eventos")
  @@index([studio_id, status])
  @@index([clienteId])
  @@index([fecha_evento])
}

model EventoBitacora {
  id          String   @id @default(cuid())
  eventoId    String
  Evento      Evento   @relation(fields: [eventoId], references: [id])
  comentario  String
  importancia String   @default("1")
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("evento_bitacoras")
}

model EventoTipo {
  id         String       @id @default(cuid())
  nombre     String //XV años Boda, Bautizo, Cumpleaños, etc
  posicion   Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Evento     Evento[]
  Paquete    Paquete[]
  Cotizacion Cotizacion[]

  @@map("evento_tipos")
}

model EventoEtapa {
  id        String   @id @default(cuid())
  nombre    String
  posicion  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Evento    Evento[]

  @@map("evento_etapas")
}

model Canal {
  id        String    @id @default(cuid())
  nombre    String
  posicion  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Cliente   Cliente[]

  @@map("canales")
}

model Pago {
  id                                 String                            @id @default(cuid())
  clienteId                          String? //id del cliente
  Cliente                            Cliente?                          @relation(fields: [clienteId], references: [id])
  cotizacionId                       String?
  Cotizacion                         Cotizacion?                       @relation(fields: [cotizacionId], references: [id], onDelete: SetNull)
  condicionesComercialesId           String?
  CondicionesComerciales             CondicionesComerciales?           @relation(fields: [condicionesComercialesId], references: [id])
  condicionesComercialesMetodoPagoId String?
  CondicionesComercialesMetodoPago   CondicionesComercialesMetodoPago? @relation(fields: [condicionesComercialesMetodoPagoId], references: [id])
  metodoPagoId                       String?
  MetodoPago                         MetodoPago?                       @relation(fields: [metodoPagoId], references: [id])
  metodo_pago                        String
  monto                              Float
  comisionStripe                      Float?
  concepto                           String
  descripcion                        String?
  stripe_session_id                  String?                           @unique
  stripe_payment_id                  String?                           @unique
  status                             String                            @default("pending")
  createdAt                          DateTime                          @default(now())
  updatedAt                          DateTime                          @updatedAt
  //agregadas
  userId                             String?
  User                               StudioUser?                       @relation(fields: [userId], references: [id])
  tipo_transaccion                   String?                           @default("ingreso") //ingreso, egreso
  categoria_transaccion              String?                           @default("abono") //abono, honorarios, servicio, producto, comision, ajuste

  @@map("pagos")
}

model Cotizacion {
  id                                 String                             @id @default(cuid())
  
  // Relación con Studio
  studio_id                          String
  studio                             Studio                             @relation(fields: [studio_id], references: [id])
  
  eventoTipoId                       String
  EventoTipo                         EventoTipo                         @relation(fields: [eventoTipoId], references: [id])
  eventoId                           String
  Evento                             Evento                             @relation(fields: [eventoId], references: [id])
  
  nombre                             String
  precio                             Float
  descuento                          Float?
  
  descripcion                        String?
  condicionesComercialesId           String?
  CondicionesComerciales             CondicionesComerciales?            @relation(fields: [condicionesComercialesId], references: [id])
  condicionesComercialesMetodoPagoId String?
  CondicionesComercialesMetodoPago   CondicionesComercialesMetodoPago[]
  status                             String                             @default("pendiente")
  archivada                          Boolean                            @default(false)
  visible_cliente                    Boolean?                           @default(true)
  createdAt                          DateTime                           @default(now())
  updatedAt                          DateTime                           @updatedAt
  expiresAt                          DateTime?                          @default(dbgenerated("now() + interval '10 day'"))
  Servicio                           CotizacionServicio[]
  Costos                             CotizacionCosto[]
  Pago                               Pago[]
  CotizacionVisita                   CotizacionVisita[]
  SolicitudPaquete                   SolicitudPaquete[]

  @@map("cotizaciones")
  @@index([studio_id, status])
  @@index([eventoId])
}

model CotizacionServicio {
  id                  String            @id @default(cuid())
  cotizacionId        String
  Cotizacion          Cotizacion        @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  servicioId          String?           // Opcional para servicios personalizados
  Servicio            Servicio?         @relation(fields: [servicioId], references: [id])
  servicioCategoriaId String?           // Opcional para servicios personalizados
  ServicioCategoria   ServicioCategoria? @relation(fields: [servicioCategoriaId], references: [id])

  // --- CAMPOS OPERACIONALES ---
  cantidad            Int               @default(1)
  posicion            Int               @default(0)
  userId              String?
  User                StudioUser?       @relation(fields: [userId], references: [id])
  fechaAsignacion     DateTime?
  FechaEntrega        DateTime?
  status              String            @default("pendiente")
  
  // --- CAMPOS SNAPSHOT PARA TRAZABILIDAD ---
  // Jerarquía: Sección → Categoría → Servicio
  seccion_nombre_snapshot    String?           // Nombre de sección al momento de cotizar
  categoria_nombre_snapshot  String?           // Nombre de categoría al momento de cotizar
  nombre_snapshot            String            @default("Servicio migrado") // Nombre del servicio al momento de cotizar
  descripcion_snapshot       String?           // Descripción completa del servicio
  
  // Precios y costos snapshot
  precio_unitario_snapshot   Float             @default(0)
  costo_snapshot             Float             @default(0)
  gasto_snapshot             Float             @default(0)
  utilidad_snapshot          Float             @default(0)
  precio_publico_snapshot    Float             @default(0)
  tipo_utilidad_snapshot     String            @default("servicio") // servicio, producto
  
  // Campos calculados (actuales, no snapshot)
  precioUnitario      Float             @default(0)  // Precio actual para cálculos
  subtotal            Float             @default(0)  // cantidad * precioUnitario
  
  // --- CAMPOS LEGACY TEMPORALES (migrar y eliminar después) ---
  // MANTENER TEMPORALMENTE para migración segura de datos
  nombre              String?           // LEGACY: migrar a nombre_snapshot
  descripcion         String?           // LEGACY: migrar a descripcion_snapshot  
  costo               Float?            @default(0) // LEGACY: migrar a costo_snapshot
  gasto               Float?            @default(0) // LEGACY: migrar a gasto_snapshot
  utilidad            Float?            @default(0) // LEGACY: migrar a utilidad_snapshot
  precio_publico      Float?            @default(0) // LEGACY: migrar a precio_publico_snapshot
  tipo_utilidad       String?           @default("servicio") // LEGACY: migrar a tipo_utilidad_snapshot
  categoria_nombre    String?           // LEGACY: migrar a categoria_nombre_snapshot
  seccion_nombre      String?           // LEGACY: migrar a seccion_nombre_snapshot
  
  // --- CAMPOS PERSONALIZACIÓN ---
  es_personalizado    Boolean           @default(false)     // true si es un servicio agregado al vuelo
  servicio_original_id String?          // ID del servicio original si es personalizado

  // === RELACIÓN CON NÓMINA ===
  NominaServicio      NominaServicio[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("cotizacion_servicios")
}

// Nueva tabla para costos adicionales
model CotizacionCosto {
  id            String     @id @default(cuid())
  cotizacionId  String
  Cotizacion    Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  
  nombre        String     // Nombre del costo adicional
  descripcion   String?    // Descripción opcional
  costo         Float      @default(0)
  tipo          String     @default("adicional") // adicional, descuento, impuesto, comision
  posicion      Int        @default(0)
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("cotizacion_costos")
}

model CotizacionVisita {
  id           String     @id @default(cuid())
  cotizacionId String
  Cotizacion   Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@map("cotizacion_visitas")
}

model Servicio {
  id                  String               @id @default(cuid())
  
  // Relación con Studio
  studio_id           String
  studio              Studio               @relation(fields: [studio_id], references: [id])
  
  servicioCategoriaId String
  ServicioCategoria   ServicioCategoria    @relation(fields: [servicioCategoriaId], references: [id])
  
  // --- CAMPOS PRINCIPALES ---
  nombre              String
  
  // --- CAMPOS FINANCIEROS ---
  costo               Float                @default(0)
  gasto               Float                @default(0)
  utilidad            Float                @default(0)
  precio_publico      Float                @default(0)
  tipo_utilidad       String               @default("servicio") //servicio, producto
  
  // --- CAMPOS OPERACIONALES ---
  posicion            Int                  @default(0)
  status              String               @default("active")
  
  // --- CAMPOS LEGACY (mantener por compatibilidad) ---
  visible_cliente     Boolean              @default(true)  // LEGACY: No se usa, mantener por compatibilidad
  
  // --- METADATOS ---
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // --- RELACIONES ---
  ServicioGasto       ServicioGasto[]
  CotizacionServicio  CotizacionServicio[]
  PaqueteServicio     PaqueteServicio[]

  @@map("servicios")
  @@index([studio_id, status])
}

model ServicioSeccion {
  id          String   @id @default(cuid())
  nombre      String   @unique
  descripcion String?
  posicion    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación: Una Sección está enlazada a muchas entradas de SeccionCategoria
  seccionCategorias SeccionCategoria[]

  @@map("servicio_secciones")
}

model SeccionCategoria {
  id          String @id @default(cuid())
  seccionId   String
  categoriaId String @unique // ¡Clave! Esto asegura que una categoría solo puede estar en una sección.

  // Relaciones
  Seccion           ServicioSeccion   @relation(fields: [seccionId], references: [id], onDelete: Cascade)
  ServicioCategoria ServicioCategoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)

  @@map("seccion_categorias")
}

model ServicioGasto {
  id         String   @id @default(cuid())
  servicioId String
  Servicio   Servicio @relation(fields: [servicioId], references: [id])
  nombre     String
  costo      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("servicio_gastos")
}

model ServicioCategoria {
  id                 String               @id @default(cuid())
  nombre             String               @unique //Fotografia, Video, Entregable, etc
  posicion           Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  seccionCategoria  SeccionCategoria? 
  Servicio           Servicio[]
  PaqueteServicio    PaqueteServicio[]
  CotizacionServicio CotizacionServicio[]

  @@map("servicio_categorias")
}

model Paquete {
  id              String            @id @default(cuid())
  
  // Relación con Studio
  studio_id       String
  studio          Studio            @relation(fields: [studio_id], references: [id])
  
  eventoTipoId    String
  EventoTipo      EventoTipo        @relation(fields: [eventoTipoId], references: [id])
  nombre          String
  costo           Float?
  gasto           Float?
  utilidad        Float?
  precio          Float?
  status          String            @default("active")
  posicion        Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  PaqueteServicio PaqueteServicio[]
  SolicitudPaquete SolicitudPaquete[]

  @@map("paquetes")
  @@index([studio_id, status])
}

model PaqueteServicio {
  id                  String            @id @default(cuid())
  paqueteId           String
  Paquete             Paquete           @relation(fields: [paqueteId], references: [id], onDelete: Cascade)
  servicioId          String
  Servicio            Servicio          @relation(fields: [servicioId], references: [id])
  servicioCategoriaId String
  ServicioCategoria   ServicioCategoria @relation(fields: [servicioCategoriaId], references: [id])
  cantidad            Int               @default(1)
  posicion            Int               @default(0)
  visible_cliente     Boolean           @default(true)
  status              String            @default("active")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("paquete_servicios")
}

model Configuracion {
  id                          String   @id @default(cuid())
  
  // Relación con Studio
  studio_id                   String
  studio                      Studio   @relation(fields: [studio_id], references: [id])
  
  nombre                      String
  utilidad_servicio           Float
  utilidad_producto           Float
  comision_venta              Float
  sobreprecio                 Float
  claveAutorizacion           String? //!added
  numeroMaximoServiciosPorDia Int? //!added
  status                      String   @default("active")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("configuraciones")
  @@index([studio_id])
}

model MetodoPago {
  id                               String                             @id @default(cuid())
  
  // Relación con Studio
  studio_id                        String
  studio                           Studio                             @relation(fields: [studio_id], references: [id])
  
  metodo_pago                      String //efectivo, tarjeta de crédito, tarjeta de debito, transferencia interbancaria, oxxo
  comision_porcentaje_base         Float?                             @map("comision_porcentaje_base") //3.6
  comision_fija_monto              Float? //3
  num_msi                          Int? // 3, 6, 9, 12
  comision_msi_porcentaje          Float?
  orden                            Int?                               @default(0)
  payment_method                   String?                            @default("card")
  status                           String                             @default("active")
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  CondicionesComercialesMetodoPago CondicionesComercialesMetodoPago[]
  Pago                             Pago[]

  @@map("metodos_pago")
  @@index([studio_id])
}

model CondicionesComerciales {
  id                               String                             @id @default(cuid())
  
  // Relación con Studio
  studio_id                        String
  studio                           Studio                             @relation(fields: [studio_id], references: [id])
  
  nombre                           String // 3/6/9/12 msi / 10% de desc plan estandar (30% anticipo / 70 en exibiciones) 
  descripcion                      String?
  descuento                        Float? // 10
  porcentaje_anticipo              Float?                             @default(0) // 30
  status                           String                             @default("active")
  orden                            Int?                               @default(0)
  // tipoEvento                       String? //! social / empresarial
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  CondicionesComercialesMetodoPago CondicionesComercialesMetodoPago[] 
  Cotizacion                       Cotizacion[]
  Pago                             Pago[]

  @@map("condiciones_comerciales")
  @@index([studio_id])
}

model CondicionesComercialesMetodoPago {
  id                       String                 @id @default(cuid())
  condicionesComercialesId String
  CondicionesComerciales   CondicionesComerciales @relation(fields: [condicionesComercialesId], references: [id], onDelete: Cascade) 
  metodoPagoId             String
  MetodoPago               MetodoPago             @relation(fields: [metodoPagoId], references: [id])
  orden                    Int?                   @default(0)
  status                   String                 @default("active")
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  Cotizacion               Cotizacion[]
  Pago                     Pago[]

  @@map("condiciones_comerciales_metodo_pago")
}

//Anuncio
model Campania {
  id        String    @id @default(cuid())
  
  // Relación con Studio
  studio_id String
  studio    Studio    @relation(fields: [studio_id], references: [id])
  
  nombre    String
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Anuncio   Anuncio[]

  @@map("campanias")
  @@index([studio_id])
}

model AnuncioPlataforma {
  id        String    @id @default(cuid())
  nombre    String //facebook, instagram, google, youtube, impreso
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Anuncio   Anuncio[]

  @@map("anuncio_plataformas")
}

model AnuncioTipo {
  id        String    @id @default(cuid())
  nombre    String //imagen, video, carousel
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  anuncio   Anuncio[]

  @@map("anuncio_tipos")
}

model AnuncioCategoria {
  id        String    @id @default(cuid())
  nombre    String //banner, video, carousel
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  anuncio   Anuncio[]

  @@map("anuncio_categorias")
}

model Anuncio {
  id                  String            @id @default(cuid())
  campaniaId          String
  Campania            Campania          @relation(fields: [campaniaId], references: [id])
  nombre              String
  anuncioTipoId       String
  AnuncioTipo         AnuncioTipo       @relation(fields: [anuncioTipoId], references: [id])
  anuncioCategoriaId  String
  AnuncioCategoria    AnuncioCategoria  @relation(fields: [anuncioCategoriaId], references: [id])
  anuncioPlataformaId String
  AnuncioPlataforma   AnuncioPlataforma @relation(fields: [anuncioPlataformaId], references: [id])
  imagen_url          String
  status              String            @default("active")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("anuncios")
}

model AnuncioVisita {
  id        String   @id @default(cuid())
  anuncioId String
  fecha     DateTime
  createdAt DateTime @default(now())

  @@map("anuncio_visitas")
}

model Agenda {
  id            String      @id @default(cuid())
  
  // Relación con Studio
  studio_id     String
  studio        Studio      @relation(fields: [studio_id], references: [id])
  
  userId        String?
  User          StudioUser? @relation(fields: [userId], references: [id])
  eventoId      String
  Evento        Evento      @relation(fields: [eventoId], references: [id])
  concepto      String?
  descripcion   String?
  googleMapsUrl String?
  direccion     String?
  fecha         DateTime?
  hora          String?
  status        String      @default("pendiente")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  agendaTipo    String?

  @@map("agenda")
  @@index([studio_id])
}

model AgendaTipo {
  id        String   @id @default(cuid())
  nombre    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("agenda_tipos")
}

model Notificacion {
  id           String   @id @default(cuid())
  userId       String?
  titulo       String
  mensaje      String
  tipo         String   @default("general")  // 🆕 NUEVO: tipo de notificación
  metadata     Json?                         // 🆕 NUEVO: datos estructurados
  status       String   @default("active")
  cotizacionId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("notificaciones")
}

// ========================================
// MODELOS PARA SISTEMA DE NOMINA
// ========================================

model Nomina {
  id                    String                @id @default(cuid())
  
  // Relación con Studio
  studio_id             String
  studio                Studio                @relation(fields: [studio_id], references: [id])
  
  // === RELACIONES PRINCIPALES ===
  userId                String
  User                  StudioUser            @relation("NominaUsuario", fields: [userId], references: [id])
  eventoId              String?               // Para reportes por evento
  Evento                Evento?               @relation(fields: [eventoId], references: [id])
  
  // === INFORMACIÓN DEL PAGO ===
  concepto              String                // Ej: "Fotografía Boda María", "Servicio múltiple Evento X"
  descripcion           String?               // Detalle adicional
  monto_bruto           Float                 // Monto antes de deducciones
  deducciones           Float                 @default(0) // ISR, retenciones, etc.
  monto_neto            Float                 // Monto final a pagar
  
  // === AGRUPACIÓN DE SERVICIOS ===
  tipo_pago             String                @default("individual") // "individual", "agrupado", "comision"
  servicios_incluidos   Int                   @default(1) // Cantidad de servicios
  
  // === CONTROL DE FECHAS ===
  fecha_asignacion      DateTime              @default(now())
  fecha_autorizacion    DateTime?             // Cuando se autoriza el pago
  fecha_pago            DateTime?             // Cuando se efectúa el pago
  periodo_inicio        DateTime?             // Para pagos por periodo
  periodo_fin           DateTime?
  
  // === STATUS Y CONTROL ===
  status                String                @default("pendiente") // pendiente, autorizado, pagado, cancelado
  autorizado_por        String?               // userId de quien autoriza
  AutorizadoPor         StudioUser?           @relation("AutorizadoPor", fields: [autorizado_por], references: [id])
  pagado_por            String?               // userId de quien ejecuta el pago
  PagadoPor             StudioUser?           @relation("PagadoPor", fields: [pagado_por], references: [id])
  metodo_pago           String?               @default("transferencia") // transferencia, efectivo, cheque
  
  // === TRAZABILIDAD FINANCIERA ===
  // Snapshots para reportes y auditoría
  costo_total_snapshot  Float                 @default(0) // Suma de costos de servicios
  gasto_total_snapshot  Float                 @default(0) // Suma de gastos de servicios
  comision_porcentaje   Float?                // Si es pago por comisión
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // === RELACIONES CON SERVICIOS ===
  NominaServicio        NominaServicio[]

  @@map("nominas")
  @@index([studio_id])
}

// Tabla intermedia para relacionar nómina con servicios específicos
model NominaServicio {
  id                    String                @id @default(cuid())
  nominaId              String
  Nomina                Nomina                @relation(fields: [nominaId], references: [id], onDelete: Cascade)
  cotizacionServicioId  String?
  CotizacionServicio    CotizacionServicio?   @relation(fields: [cotizacionServicioId], references: [id], onDelete: SetNull)
  
  // === SNAPSHOT DEL SERVICIO AL MOMENTO DEL PAGO ===
  servicio_nombre       String                // Snapshot del nombre
  seccion_nombre        String?               // Snapshot de la sección
  categoria_nombre      String?               // Snapshot de la categoría
  costo_asignado        Float                 // Costo específico para este pago
  cantidad_asignada     Int                   @default(1)

  createdAt             DateTime              @default(now())
  
  @@unique([nominaId, cotizacionServicioId]) // Un servicio solo puede estar en una nómina
  @@map("nomina_servicios")
}

// === NUEVOS MODELOS PARA PORTAL CLIENTE ===

// Suscripciones (para funcionalidad futura)
model Suscripcion {
  id                String   @id @default(cuid())
  clienteId         String   @unique  // 1 cliente = 1 suscripción global
  tipo              String   @default("evento") // 'evento', 'mensual', 'anual'
  status            String   @default("activa") // 'activa', 'inactiva', 'vencida'
  fechaInicio       DateTime @default(now())
  fechaVencimiento  DateTime?
  precio            Float?
  descripcion       String?
  
  // Relaciones
  cliente           Cliente  @relation(fields: [clienteId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("suscripciones")
}

// === MODELO GASTO INDEPENDIENTE ===
model Gasto {
  id              String      @id @default(cuid())
  
  // Relación con Studio
  studio_id       String
  studio          Studio      @relation(fields: [studio_id], references: [id])
  
  concepto        String
  descripcion     String?
  monto           Float
  categoria       String   // oficina, transporte, marketing, servicios, equipamiento, otros
  subcategoria    String?  // detalle específico
  fecha           DateTime @default(now())
  fechaFactura    DateTime? // fecha real del gasto
  status          String   @default("activo") // activo, cancelado
  metodoPago      String?  // efectivo, transferencia, tarjeta, cheque
  numeroFactura   String?
  proveedor       String?
  
  // Relaciones
  eventoId        String?  // Si está asociado a un evento específico
  Evento          Evento?  @relation(fields: [eventoId], references: [id])
  usuarioId       String
  Usuario         StudioUser @relation(fields: [usuarioId], references: [id])
  
  // Archivos
  comprobanteUrl  String?  // URL del comprobante
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([fecha, categoria])
  @@index([eventoId])
  @@index([studio_id])
  @@map("gastos")
}

// ========================================
// CONFIGURACIÓN DE NEGOCIO
// ========================================

model Negocio {
  id          String   @id @default(cuid())
  
  // Relación con Studio
  studio_id   String
  studio      Studio   @relation(fields: [studio_id], references: [id])
  
  nombre      String   // Nombre del negocio
  descripcion String?  // Descripción breve
  direccion   String?  // Dirección física
  telefono    String?  // Teléfono principal
  email       String?  // Email de contacto
  sitioWeb    String?  // URL del sitio web
  
  // Imágenes
  logoUrl     String?  // URL del logotipo
  isotipoUrl  String?  // URL del isotipo (icono)
  
  // Configuración adicional
  moneda      String   @default("MXN")   // Moneda por defecto
  timezone    String   @default("America/Mexico_City") // Zona horaria
  idioma      String   @default("es")    // Idioma por defecto
  
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  NegocioRRSS     NegocioRRSS[]
  NegocioHorarios NegocioHorarios[]

  @@map("negocios")
  @@index([studio_id])
}

model NegocioRRSS {
  id          String   @id @default(cuid())
  negocioId   String
  Negocio     Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  
  plataforma  String   // facebook, instagram, twitter, linkedin, tiktok, youtube, etc.
  username    String?  // Nombre de usuario o handle
  url         String   // URL completa del perfil
  activo      Boolean  @default(true)
  orden       Int      @default(0) // Para ordenar en la UI
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([negocioId, plataforma])
  @@index([negocioId, activo])
  @@map("negocio_rrss")
}

model NegocioHorarios {
  id          String   @id @default(cuid())
  negocioId   String
  Negocio     Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  
  diaSemana   Int      // 0=Domingo, 1=Lunes, ..., 6=Sábado
  horaInicio  String?  // "09:00" - null si está cerrado
  horaFin     String?  // "18:00" - null si está cerrado
  cerrado     Boolean  @default(false) // Si está cerrado todo el día
  
  // Para horarios especiales (opcional)
  fechaEspecial DateTime? // Para días específicos (feriados, etc.)
  notas       String?     // "Solo citas", "Horario reducido", etc.
  
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([negocioId, diaSemana])
  @@index([negocioId, activo])
  @@map("negocio_horarios")
}

model SolicitudPaquete {
  id              String    @id @default(cuid())
  cotizacionId    String
  Cotizacion      Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  paqueteId       String
  Paquete         Paquete   @relation(fields: [paqueteId], references: [id])
  
  // Datos del cliente
  clienteNombre   String
  clienteEmail    String
  clienteTelefono String?
  mensaje         String?
  
  // Datos del paquete (snapshot para referencia)
  paqueteNombre   String
  precioPaquete   Float
  diferenciaPrecio Float? // Diferencia con cotización original
  
  // Datos del evento (para referencia rápida)
  eventoFecha     DateTime?
  eventoLugar     String?
  
  // Estado de la solicitud
  estado          String    @default("pendiente") // pendiente, procesando, completada, rechazada
  notas           String?   // Notas del asesor
  fechaSolicitud  DateTime  @default(now())
  fechaProcesada  DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([cotizacionId])
  @@index([paqueteId])
  @@index([estado])
  @@index([fechaSolicitud])
  @@map("solicitud_paquetes")
}
