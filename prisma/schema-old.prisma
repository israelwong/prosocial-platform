generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =====================================================================
// PLANES DE SUSCRIPCIÓN SAAS
// =====================================================================

model Plan {
  id                   String  @id @default(cuid())
  name                 String  // "Starter", "Professional", "Enterprise"
  slug                 String  @unique // "starter", "professional", "enterprise"
  active_project_limit Int     // 5, 15, 50
  price_monthly        Decimal // 29, 79, 199
  price_yearly         Decimal // 290, 790, 1990 (2 meses gratis)
  stripe_price_id      String? // Stripe Price ID

  // Features
  features             Json    @default("{}") // { "analytics": true, "custom_domain": false }

  // Relaciones
  studios              Studio[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

// =====================================================================
// ESTUDIOS (TENANTS)
// =====================================================================

model Studio {
  id                    String  @id @default(cuid())
  slug                  String  @unique // "prosocial-events", "estudio-luna"
  name                  String          // "ProSocial Events", "Estudio Luna"
  email                 String  @unique
  phone                 String?
  plan_id               String

  // Stripe Integration
  stripe_customer_id    String? // Para suscripciones
  stripe_connect_id     String? // Para revenue share
  stripe_onboarding_complete Boolean @default(false)

  // Billing
  subscription_status   SubscriptionStatus @default(TRIAL)
  trial_ends_at        DateTime?
  subscription_ends_at DateTime?

  // Projects tracking
  active_projects_count Int @default(0)

  // Branding
  logo_url             String?
  brand_color          String @default("#3b82f6")
  custom_domain        String?

  // Settings
  settings             Json @default("{}")

  // Relaciones
  plan                 Plan @relation(fields: [plan_id], references: [id])
  projects             Project[]
  clients              Client[]
  users                StudioUser[]
  subscriptions        Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("studios")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}

// =====================================================================
// SUSCRIPCIONES
// =====================================================================

model Subscription {
  id                    String @id @default(cuid())
  studio_id             String
  stripe_subscription_id String @unique
  status                SubscriptionStatus
  current_period_start  DateTime
  current_period_end    DateTime

  // Relaciones
  studio                Studio @relation(fields: [studio_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// =====================================================================
// PROYECTOS (EQUIVALENTE A EVENTOS)
// =====================================================================

model Project {
  id          String        @id @default(cuid())
  studio_id   String
  name        String
  client_id   String
  event_date  DateTime
  status      ProjectStatus @default(ACTIVE)

  // Financials
  total_value          Decimal @default(0)
  prosocial_commission Decimal @default(0) // 30%
  studio_earnings      Decimal @default(0) // 70%

  // Metadata
  event_type    String? // "Boda", "XV Años", "Aniversario"
  location      String?
  description   String?

  // Relaciones
  studio        Studio @relation(fields: [studio_id], references: [id])
  client        Client @relation(fields: [client_id], references: [id])
  quotations    Quotation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft delete
  archived_at DateTime?

  @@map("projects")
}

enum ProjectStatus {
  ACTIVE      // Proyecto activo, cuenta para límite
  ARCHIVED    // Proyecto archivado, no cuenta para límite
  COMPLETED   // Proyecto completado
  CANCELLED   // Proyecto cancelado
}

// =====================================================================
// CLIENTES (AISLADOS POR STUDIO)
// =====================================================================

model Client {
  id        String @id @default(cuid())
  studio_id String
  name      String
  email     String?
  phone     String?
  address   String?

  // Metadata
  notes     String?
  tags      String[] // ["VIP", "Referido", etc.]

  // Relaciones
  studio    Studio @relation(fields: [studio_id], references: [id])
  projects  Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studio_id, email]) // Email único por studio
  @@map("clients")
}

// =====================================================================
// COTIZACIONES MULTI-TENANT
// =====================================================================

model Quotation {
  id         String          @id @default(cuid())
  project_id String
  name       String
  total      Decimal
  discount   Decimal?
  status     QuotationStatus @default(DRAFT)

  // Content
  description String?
  items       Json @default("[]") // Array de items de la cotización

  // Timestamps
  sent_at     DateTime?
  approved_at DateTime?
  expires_at  DateTime?

  // Relaciones
  project     Project @relation(fields: [project_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotations")
}

enum QuotationStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
}

// =====================================================================
// USUARIOS DE ESTUDIO
// =====================================================================

model StudioUser {
  id        String     @id @default(cuid())
  studio_id String
  email     String
  name      String
  role      StudioRole @default(MEMBER)

  // Auth
  password_hash String?
  email_verified Boolean @default(false)
  last_login    DateTime?

  // Relaciones
  studio        Studio @relation(fields: [studio_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studio_id, email])
  @@map("studio_users")
}

enum StudioRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// =====================================================================
// REVENUE TRACKING
// =====================================================================

model RevenueTransaction {
  id            String @id @default(cuid())
  studio_id     String
  project_id    String?
  type          RevenueType
  amount        Decimal

  // Commission split
  prosocial_fee Decimal // 30%
  studio_amount Decimal // 70%

  // Stripe data
  stripe_payment_intent_id String?
  stripe_transfer_id       String?

  // Metadata
  description   String?
  metadata      Json @default("{}")

  createdAt DateTime @default(now())

  @@map("revenue_transactions")
}

enum RevenueType {
  SUBSCRIPTION  // Pago mensual/anual del plan
  PROJECT       // Revenue share de proyecto
  TRANSACTION_FEE // 1.5% fee
  B2B2C_SERVICE // Revenue share servicios B2B2C
}

// =====================================================================
// AUDIT LOG
// =====================================================================

model AuditLog {
  id        String @id @default(cuid())
  studio_id String?
  user_id   String?
  action    String // "project.created", "plan.upgraded", etc.

  // Data
  entity_type String? // "Project", "Studio", etc.
  entity_id   String?
  old_values  Json?
  new_values  Json?

  // Metadata
  ip_address  String?
  user_agent  String?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}
