# ProSocial Platform - Cursor Rules

## üéØ **PROYECTO OVERVIEW**

ProSocial Platform es una plataforma SaaS multi-tenant para gesti√≥n de estudios de fotograf√≠a con:

- **Next.js 15** (App Router) + **TypeScript** + **Tailwind CSS**
- **Supabase** (Auth + Database) + **Prisma** (ORM)
- **Stripe** (Pagos) + **Shadcn/ui** (Componentes)
- **Arquitectura Multi-tenant** con roles: Super Admin, Asesor, Suscriptor

## üèóÔ∏è **ARQUITECTURA Y ESTRUCTURA**

### **Estructura de Directorios**

```
src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router
‚îÇ   ‚îú‚îÄ‚îÄ (marketing)/       # Marketing p√∫blico
‚îÇ   ‚îú‚îÄ‚îÄ admin/             # Panel de administraci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ asesor/            # Panel de asesores
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API Routes
‚îÇ   ‚îî‚îÄ‚îÄ studio/            # Landing pages de estudios
‚îú‚îÄ‚îÄ components/            # Componentes reutilizables
‚îú‚îÄ‚îÄ lib/                   # Utilidades y configuraciones
‚îî‚îÄ‚îÄ types/                 # Definiciones TypeScript
```

### **Rutas Principales**

- `/admin/*` - Panel de administraci√≥n (Super Admin)
- `/asesor/*` - Panel de asesores
- `/studio/[slug]` - Landing page de estudios
- `/api/*` - API endpoints

## üé® **DISE√ëO Y UI/UX**

### **Tema Oscuro (Zinc)**

```css
/* Colores principales */
bg-zinc-950    /* Fondo principal */
bg-zinc-900    /* Cards y contenedores */
bg-zinc-800    /* Bordes y separadores */
text-white     /* Texto principal */
text-zinc-300  /* Texto secundario */
```

### **Componentes UI**

- **Shadcn/ui** como base de componentes
- **Lucide React** para iconos
- **Tailwind CSS** para estilos
- **Sonner** para notificaciones toast

### **Patrones de Dise√±o**

- **Cards** con `bg-zinc-900 border-zinc-800`
- **Botones** con colores sem√°nticos (blue-600, red-600, etc.)
- **Formularios** con validaci√≥n y estados de carga
- **Modales** para acciones CRUD

## üîß **DESARROLLO Y C√ìDIGO**

### **TypeScript**

- **Strict mode** habilitado
- **Interfaces** para todos los tipos de datos
- **Tipado fuerte** en props y estados
- **Paths aliases** con `@/*` para imports

### **React Patterns**

```typescript
// Componentes funcionales con hooks
"use client";

// Estados con useState
const [loading, setLoading] = useState(false);

// Efectos con dependencias correctas
useEffect(() => {
  fetchData();
}, [dependency]);

// useCallback para funciones en dependencias
const fetchData = useCallback(async () => {
  // ...
}, [dependency]);
```

### **Next.js App Router**

- **Server Components** por defecto
- **Client Components** con `'use client'` cuando necesario
- **API Routes** en `app/api/`
- **Dynamic routes** con `[id]` o `[slug]`

## üóÑÔ∏è **BASE DE DATOS Y API**

### **Prisma Schema**

- **Modelos** con naming convention `ProSocial*`
- **Relaciones** bien definidas con `@relation`
- **√çndices** para optimizaci√≥n de queries
- **Campos** con tipos apropiados (String, Int, DateTime, Decimal)

### **API Routes**

```typescript
// Estructura est√°ndar
export async function GET(request: Request) {
  try {
    // L√≥gica de negocio
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json({ error: "Message" }, { status: 500 });
  }
}
```

### **Supabase Integration**

- **Auth** con `@supabase/ssr`
- **RLS** (Row Level Security) habilitado
- **Client/Server** separation correcta

## üöÄ **FUNCIONALIDADES PRINCIPALES**

### **Sistema de Leads (CRM)**

- **Kanban Board** con drag & drop
- **Pipeline** configurable por etapas
- **Bit√°cora** de actividades
- **Canales de adquisici√≥n** trackeables

### **Gesti√≥n de Campa√±as**

- **Campa√±as activas** vs **historial**
- **Plataformas** de publicidad
- **M√©tricas** de ROI y conversi√≥n

### **Multi-tenant**

- **Estudios** como tenants
- **Roles** y permisos granulares
- **Aislamiento** de datos por tenant

## üìù **CONVENCIONES DE C√ìDIGO**

### **Naming**

- **Archivos**: kebab-case (`lead-form.tsx`)
- **Componentes**: PascalCase (`LeadForm`)
- **Variables**: camelCase (`leadData`)
- **Constantes**: UPPER_SNAKE_CASE (`API_BASE_URL`)

### **Imports**

```typescript
// Orden de imports
import React from "react";
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { Button } from "@/components/ui/button";
import { LeadForm } from "./components/LeadForm";
```

### **Error Handling**

```typescript
try {
  // Operaci√≥n
} catch (error) {
  console.error("Error context:", error);
  toast.error("Mensaje de error para usuario");
  // Fallback o estado de error
}
```

## üîí **SEGURIDAD Y VALIDACI√ìN**

### **Autenticaci√≥n**

- **Supabase Auth** con JWT
- **Middleware** para protecci√≥n de rutas
- **RLS** en base de datos

### **Validaci√≥n**

- **Zod** para schemas de validaci√≥n
- **React Hook Form** para formularios
- **Validaci√≥n** tanto cliente como servidor

## üß™ **TESTING Y CALIDAD**

### **Linting**

- **ESLint** con configuraci√≥n Next.js
- **TypeScript** strict mode
- **Prettier** para formato (si est√° configurado)

### **Performance**

- **Dynamic imports** para code splitting
- **Image optimization** con Next.js Image
- **Prisma** queries optimizadas

## üì¶ **DEPENDENCIAS PRINCIPALES**

### **Core**

- `next@15.5.2` - Framework
- `react@19.1.0` - UI Library
- `typescript@5` - Type Safety

### **UI/UX**

- `@radix-ui/*` - Componentes primitivos
- `tailwindcss@4` - Styling
- `lucide-react` - Iconos
- `sonner` - Notificaciones

### **Backend**

- `@prisma/client@6.15.0` - ORM
- `@supabase/supabase-js@2.57.4` - Backend
- `stripe@18.5.0` - Pagos

### **Utilities**

- `@dnd-kit/*` - Drag & Drop
- `react-hook-form` - Formularios
- `zod` - Validaci√≥n
- `date-fns` - Fechas

## üéØ **MEJORES PR√ÅCTICAS**

### **Componentes**

- **Reutilizables** y modulares
- **Props** bien tipadas
- **Estados** locales cuando sea posible
- **Loading states** y error boundaries

### **Performance**

- **useCallback** para funciones en dependencias
- **useMemo** para c√°lculos costosos
- **Dynamic imports** para componentes pesados
- **Optimistic updates** cuando sea apropiado

### **Accesibilidad**

- **Semantic HTML** correcto
- **ARIA labels** cuando sea necesario
- **Keyboard navigation** funcional
- **Color contrast** adecuado

## üö® **ANTI-PATRONES A EVITAR**

### **‚ùå No hacer**

- Usar `any` type en TypeScript
- Mutar props directamente
- Usar `useEffect` sin dependencias correctas
- Hardcodear strings en lugar de constantes
- Ignorar errores de linting
- Usar Prisma en client-side components

### **‚úÖ S√≠ hacer**

- Tipado fuerte en TypeScript
- Inmutabilidad en estados
- Dependencias correctas en hooks
- Constantes para valores m√°gicos
- C√≥digo limpio sin warnings
- API routes para operaciones de DB

## üîÑ **FLUJO DE DESARROLLO**

### **Nuevas Features**

1. **Dise√±ar** la estructura de datos en Prisma
2. **Crear** API routes necesarias
3. **Implementar** componentes UI
4. **Conectar** frontend con backend
5. **Testear** funcionalidad completa
6. **Optimizar** performance si es necesario

### **Debugging**

- **Console.log** para debugging temporal
- **React DevTools** para inspeccionar estados
- **Prisma Studio** para ver datos
- **Network tab** para API calls

## üìö **RECURSOS Y DOCUMENTACI√ìN**

### **Documentaci√≥n Oficial**

- [Next.js 15 Docs](https://nextjs.org/docs)
- [Prisma Docs](https://www.prisma.io/docs)
- [Supabase Docs](https://supabase.com/docs)
- [Tailwind CSS](https://tailwindcss.com/docs)

### **Componentes**

- [Shadcn/ui](https://ui.shadcn.com/)
- [Radix UI](https://www.radix-ui.com/)
- [Lucide Icons](https://lucide.dev/)

---

## üéØ **INSTRUCCIONES ESPEC√çFICAS PARA CURSOR**

### **Al crear componentes:**

1. **Usar** el tema oscuro zinc consistente
2. **Implementar** estados de loading y error
3. **Tipar** todas las props e interfaces
4. **Seguir** los patrones de dise√±o establecidos
5. **Optimizar** para performance desde el inicio

### **Al modificar APIs:**

1. **Mantener** compatibilidad con frontend existente
2. **Validar** inputs con Zod
3. **Manejar** errores apropiadamente
4. **Documentar** cambios en tipos
5. **Testear** endpoints manualmente

### **Al trabajar con base de datos:**

1. **Usar** Prisma Client correctamente
2. **Optimizar** queries con includes selectivos
3. **Manejar** transacciones cuando sea necesario
4. **Respetar** RLS policies de Supabase
5. **Migrar** schema cuando sea necesario

### **Al implementar nuevas features:**

1. **Seguir** la arquitectura multi-tenant
2. **Implementar** permisos por rol
3. **Mantener** consistencia con el dise√±o
4. **Optimizar** para mobile y desktop
5. **Documentar** funcionalidades complejas

---

**¬°Mant√©n el c√≥digo limpio, tipado y siguiendo estas convenciones para un desarrollo eficiente! üöÄ**
