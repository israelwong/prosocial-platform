# ProSocial Platform - Cursor Rules

## üéØ **PROYECTO OVERVIEW**

ProSocial Platform es una plataforma SaaS multi-tenant para gesti√≥n de estudios de fotograf√≠a con:

- **Next.js 15.5.2** (App Router) + **TypeScript 5** + **Tailwind CSS 4**
- **React 19.1.0** + **Supabase** (Auth + Database) + **Prisma 6.15.0** (ORM)
- **Stripe** (Pagos) + **ZEN Design System** (Componentes UI) + **Shadcn/ui** (Base)
- **Arquitectura Multi-tenant** con roles: Super Admin, Asesor, Suscriptor

### **Estado de Versiones**

- ‚úÖ **Next.js 15.5.2** - √öltima versi√≥n estable (26 agosto 2024)
- ‚úÖ **React 19.1.0** - √öltima versi√≥n estable con nuevas caracter√≠sticas
- ‚úÖ **TypeScript 5** - √öltima versi√≥n estable con mejoras de rendimiento
- ‚úÖ **Todas las dependencias** actualizadas a versiones compatibles

## üèóÔ∏è **ARQUITECTURA Y ESTRUCTURA**

### **Estructura de Directorios**

```
src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router
‚îÇ   ‚îú‚îÄ‚îÄ (auth)/            # Autenticaci√≥n (route group)
‚îÇ   ‚îú‚îÄ‚îÄ (marketing)/       # Marketing p√∫blico (route group)
‚îÇ   ‚îú‚îÄ‚îÄ admin/             # Panel de administraci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ agente/            # Panel de asesores
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API Routes
‚îÇ   ‚îî‚îÄ‚îÄ studio/            # Landing pages de estudios
‚îú‚îÄ‚îÄ components/            # Componentes reutilizables
‚îÇ   ‚îú‚îÄ‚îÄ ui/                # Componentes UI
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ zen/          # ZEN Design System (USAR ESTOS)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ shadcn/       # Componentes Shadcn base
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ lib/                   # Utilidades y configuraciones
‚îî‚îÄ‚îÄ types/                 # Definiciones TypeScript
```

### **Rutas Principales**

- `/admin/*` - Panel de administraci√≥n (Super Admin)
- `/asesor/*` - Panel de asesores
- `/studio/[slug]` - Landing page de estudios
- `/api/*` - API endpoints

### **Rutas de Autenticaci√≥n**

- `/login` - Inicio de sesi√≥n
- `/sign-up` - Registro de usuarios
- `/forgot-password` - Recuperaci√≥n de contrase√±a
- `/update-password` - Actualizaci√≥n de contrase√±a
- `/error` - P√°gina de error de autenticaci√≥n
- `/redirect` - Redirecci√≥n post-autenticaci√≥n
- `/sign-up-success` - Confirmaci√≥n de registro
- `/complete-profile` - Completar perfil
- `/confirm` - Confirmaci√≥n de email

## üé® **DISE√ëO Y UI/UX**

### **Tema Oscuro (Zinc)**

```css
/* Colores principales */
bg-zinc-950    /* Fondo principal */
bg-zinc-900    /* Cards y contenedores */
bg-zinc-800    /* Bordes y separadores */
text-white     /* Texto principal */
text-zinc-300  /* Texto secundario */
```

### **Componentes UI**

- **ZEN Design System** - Componentes unificados (USAR ESTOS PRIMERO)
- **Shadcn/ui** - Componentes base (solo si no existe en ZEN)
- **Lucide React** para iconos
- **Tailwind CSS** para estilos
- **Sonner** para notificaciones toast

### **Patrones de Dise√±o ZEN**

- **ZenCard** - Contenedores con tema zinc unificado
- **ZenButton** - Botones con variantes (primary, secondary, destructive, outline, ghost)
- **ZenInput** - Inputs con label integrado y estados
- **ZenTextarea** - Textarea con contador de caracteres
- **Formularios** con validaci√≥n y estados de carga ZEN
- **Modales** con ZenModal para acciones CRUD

## üîß **DESARROLLO Y C√ìDIGO**

### **TypeScript**

- **Strict mode** habilitado
- **Interfaces** para todos los tipos de datos
- **Tipado fuerte** en props y estados
- **Paths aliases** con `@/*` para imports

### **React Patterns**

```typescript
// Componentes funcionales con hooks
"use client";

// Estados con useState
const [loading, setLoading] = useState(false);

// Efectos con dependencias correctas
useEffect(() => {
  fetchData();
}, [dependency]);

// useCallback para funciones en dependencias
const fetchData = useCallback(async () => {
  // ...
}, [dependency]);
```

### **Next.js App Router**

- **Server Components** por defecto
- **Client Components** con `'use client'` cuando necesario
- **API Routes** en `app/api/`
- **Dynamic routes** con `[id]` o `[slug]`

## üóÑÔ∏è **BASE DE DATOS Y API**

### **Prisma Schema**

- **Modelos** con naming convention `ProSocial*`
- **Relaciones** bien definidas con `@relation`
- **√çndices** para optimizaci√≥n de queries
- **Campos** con tipos apropiados (String, Int, DateTime, Decimal)

### **API Routes**

```typescript
// Estructura est√°ndar
export async function GET(request: Request) {
  try {
    // L√≥gica de negocio
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json({ error: "Message" }, { status: 500 });
  }
}
```

### **Supabase Integration**

- **Auth** con `@supabase/ssr`
- **RLS** (Row Level Security) habilitado
- **Client/Server** separation correcta

## üöÄ **FUNCIONALIDADES PRINCIPALES**

### **Sistema de Leads (CRM)**

- **Kanban Board** con drag & drop
- **Pipeline** configurable por etapas
- **Bit√°cora** de actividades
- **Canales de adquisici√≥n** trackeables

### **Gesti√≥n de Campa√±as**

- **Campa√±as activas** vs **historial**
- **Plataformas** de publicidad
- **M√©tricas** de ROI y conversi√≥n

### **Multi-tenant**

- **Estudios** como tenants
- **Roles** y permisos granulares
- **Aislamiento** de datos por tenant

## üìù **CONVENCIONES DE C√ìDIGO**

### **Naming**

- **Archivos**: kebab-case (`lead-form.tsx`)
- **Componentes**: PascalCase (`LeadForm`)
- **Variables**: camelCase (`leadData`)
- **Constantes**: UPPER_SNAKE_CASE (`API_BASE_URL`)

### **Imports**

```typescript
// Orden de imports
import React from "react";
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

// ‚úÖ CORRECTO - Usar ZEN Design System PRIMERO
import { ZenButton, ZenInput, ZenCard } from "@/components/ui/zen";

// ‚ùå Solo si no existe en ZEN
import { Button } from "@/components/ui/shadcn/button";

import { LeadForm } from "./components/LeadForm";
```

### **Error Handling**

```typescript
try {
  // Operaci√≥n
} catch (error) {
  console.error("Error context:", error);
  toast.error("Mensaje de error para usuario");
  // Fallback o estado de error
}
```

## üîí **SEGURIDAD Y VALIDACI√ìN**

### **Autenticaci√≥n**

- **Supabase Auth** con JWT
- **Middleware** para protecci√≥n de rutas
- **RLS** en base de datos

### **Validaci√≥n**

- **Zod** para schemas de validaci√≥n
- **React Hook Form** para formularios
- **Validaci√≥n** tanto cliente como servidor

## üß™ **TESTING Y CALIDAD**

### **Linting**

- **ESLint** con configuraci√≥n Next.js
- **TypeScript** strict mode
- **Prettier** para formato (si est√° configurado)

### **Performance**

- **Dynamic imports** para code splitting
- **Image optimization** con Next.js Image
- **Prisma** queries optimizadas

## üì¶ **DEPENDENCIAS PRINCIPALES**

### **Core**

- `next@15.5.2` - Framework (√∫ltima versi√≥n estable)
- `react@19.1.0` - UI Library (√∫ltima versi√≥n estable)
- `typescript@5` - Type Safety (√∫ltima versi√≥n estable)

### **UI/UX**

- `@radix-ui/*` - Componentes primitivos
- `tailwindcss@4` - Styling
- `lucide-react` - Iconos
- `sonner` - Notificaciones

### **Backend**

- `@prisma/client@6.15.0` - ORM
- `@supabase/supabase-js@2.57.4` - Backend
- `stripe@18.5.0` - Pagos

### **Utilities**

- `@dnd-kit/*` - Drag & Drop
- `react-hook-form` - Formularios
- `zod` - Validaci√≥n
- `date-fns` - Fechas

## üéØ **MEJORES PR√ÅCTICAS**

### **Componentes**

- **Reutilizables** y modulares
- **Props** bien tipadas
- **Estados** locales cuando sea posible
- **Loading states** y error boundaries

### **Performance**

- **useCallback** para funciones en dependencias
- **useMemo** para c√°lculos costosos
- **Dynamic imports** para componentes pesados
- **Optimistic updates** cuando sea apropiado

### **Accesibilidad**

- **Semantic HTML** correcto
- **ARIA labels** cuando sea necesario
- **Keyboard navigation** funcional
- **Color contrast** adecuado

## üö® **ANTI-PATRONES A EVITAR**

### **‚ùå No hacer**

- Usar `any` type en TypeScript
- Mutar props directamente
- Usar `useEffect` sin dependencias correctas
- Hardcodear strings en lugar de constantes
- Ignorar errores de linting
- Usar Prisma en client-side components

### **‚úÖ S√≠ hacer**

- Tipado fuerte en TypeScript
- Inmutabilidad en estados
- Dependencias correctas en hooks
- Constantes para valores m√°gicos
- C√≥digo limpio sin warnings
- API routes para operaciones de DB

## üîÑ **FLUJO DE DESARROLLO**

### **Nuevas Features**

1. **Dise√±ar** la estructura de datos en Prisma
2. **Crear** API routes necesarias
3. **Implementar** componentes UI
4. **Conectar** frontend con backend
5. **Testear** funcionalidad completa
6. **Optimizar** performance si es necesario

### **Debugging**

- **Console.log** para debugging temporal
- **React DevTools** para inspeccionar estados
- **Prisma Studio** para ver datos
- **Network tab** para API calls

## üìö **RECURSOS Y DOCUMENTACI√ìN**

### **Documentaci√≥n del Proyecto (docs/)**

**ESTRUCTURA ORGANIZADA:**

- `docs/01-architecture/` - Arquitectura y dise√±o del sistema
- `docs/02-implementation/` - Gu√≠as de implementaci√≥n paso a paso
- `docs/03-troubleshooting/` - Soluci√≥n de problemas conocidos
- `docs/04-best-practices/` - Mejores pr√°cticas y est√°ndares
- `docs/05-legacy/` - C√≥digo legacy y migraci√≥n
- `docs/06-reference/` - Referencias y configuraciones

**CONSULTAR SIEMPRE:**

- `docs/README.md` - √çndice principal de documentaci√≥n
- `docs/04-best-practices/TYPESCRIPT_BEST_PRACTICES.md` - Reglas de TypeScript
- `docs/02-implementation/KANBAN_IMPLEMENTATION_GUIDE.md` - Gu√≠a del Kanban

### **Documentaci√≥n Oficial**

- [Next.js 15 Docs](https://nextjs.org/docs)
- [Prisma Docs](https://www.prisma.io/docs)
- [Supabase Docs](https://supabase.com/docs)
- [Tailwind CSS](https://tailwindcss.com/docs)

### **Componentes**

- [Shadcn/ui](https://ui.shadcn.com/)
- [Radix UI](https://www.radix-ui.com/)
- [Lucide Icons](https://lucide.dev/)

---

## üéØ **INSTRUCCIONES ESPEC√çFICAS PARA CURSOR**

### **üîç CONSULTA DE DOCUMENTACI√ìN (OBLIGATORIO)**

**ANTES de resolver cualquier problema, SIEMPRE:**

1. **Consultar** la documentaci√≥n en `/docs/` para soluciones existentes
2. **Revisar** especialmente:
   - `docs/03-troubleshooting/` - Para problemas conocidos
   - `docs/04-best-practices/` - Para patrones establecidos
   - `docs/02-implementation/` - Para gu√≠as de implementaci√≥n
3. **Buscar** en archivos de documentaci√≥n antes de proponer nuevas soluciones
4. **Verificar** si el problema ya fue documentado y resuelto

### **üìù DOCUMENTACI√ìN DE SOLUCIONES (CR√çTICO)**

**NUNCA documentar autom√°ticamente. SIEMPRE preguntar:**

1. **Despu√©s de resolver un problema**, preguntar al usuario:
   > "¬øEst√°s listo para que documente esta soluci√≥n?"
2. **Esperar confirmaci√≥n** antes de crear/actualizar documentaci√≥n
3. **Validar** que la soluci√≥n sea definitiva y no temporal
4. **Confirmar** que el usuario est√° satisfecho con la implementaci√≥n

**Raz√≥n**: Las soluciones pueden ser prematuras o no definitivas. El usuario debe validar antes de documentar.

### **üîÑ FLUJO DE TRABAJO CON DOCUMENTACI√ìN**

**PROCESO OBLIGATORIO:**

1. **Problema identificado** ‚Üí Consultar `docs/03-troubleshooting/`
2. **Soluci√≥n encontrada** ‚Üí Implementar y probar
3. **Soluci√≥n validada** ‚Üí Preguntar al usuario si documentar
4. **Confirmaci√≥n recibida** ‚Üí Documentar en categor√≠a apropiada
5. **Documentaci√≥n actualizada** ‚Üí Actualizar √≠ndice en `docs/README.md`

**CATEGOR√çAS DE DOCUMENTACI√ìN:**

- **Problemas t√©cnicos** ‚Üí `docs/03-troubleshooting/`
- **Patrones de c√≥digo** ‚Üí `docs/04-best-practices/`
- **Gu√≠as de implementaci√≥n** ‚Üí `docs/02-implementation/`
- **Decisiones arquitect√≥nicas** ‚Üí `docs/01-architecture/`

### **Al crear componentes:**

1. **USAR ZEN DESIGN SYSTEM PRIMERO** - Verificar si existe componente ZEN
2. **Importar desde ZEN**: `import { ZenButton, ZenInput } from "@/components/ui/zen"`
3. **Solo usar Shadcn** si no existe equivalente en ZEN: `import { Button } from "@/components/ui/shadcn/button"`
4. **Tipar** todas las props e interfaces (NUNCA usar `any`)
5. **Seguir** los design tokens ZEN (colores, espaciado, tipograf√≠a)
6. **Implementar** estados de loading y error con patrones ZEN
7. **Optimizar** para performance desde el inicio

### **Al modificar APIs:**

1. **Mantener** compatibilidad con frontend existente
2. **Validar** inputs con Zod
3. **Manejar** errores apropiadamente
4. **Documentar** cambios en tipos
5. **Testear** endpoints manualmente

### **Al trabajar con base de datos:**

1. **Usar** Prisma Client correctamente
2. **Optimizar** queries con includes selectivos
3. **Manejar** transacciones cuando sea necesario
4. **Respetar** RLS policies de Supabase
5. **Migrar** schema cuando sea necesario

### **Al implementar nuevas features:**

1. **Seguir** la arquitectura multi-tenant
2. **Implementar** permisos por rol
3. **Mantener** consistencia con el dise√±o
4. **Optimizar** para mobile y desktop
5. **Documentar** funcionalidades complejas (solo despu√©s de confirmaci√≥n)

### **üö® PROTECCI√ìN DE ARCHIVOS DE ENTORNO (CR√çTICO):**

**NUNCA modificar archivos `.env` o `.env.local`:**

1. **PROHIBIDO** editar, crear o modificar archivos `.env*`
2. **PROHIBIDO** sobrescribir variables de entorno existentes
3. **PROHIBIDO** agregar valores de ejemplo o placeholder
4. **PROHIBIDO** hardcodear URLs, keys o secrets

**Si necesitas una nueva variable de entorno:**

1. **SOLICITAR** al usuario que la agregue manualmente
2. **PROPORCIONAR** el nombre exacto de la variable
3. **EXPLICAR** el prop√≥sito y formato requerido
4. **ESPERAR** confirmaci√≥n antes de continuar

**Ejemplo de solicitud:**

```
"Necesito que agregues la variable de entorno:
NOMBRE_VARIABLE=valor_requerido
Prop√≥sito: [explicaci√≥n]
Formato: [tipo de dato esperado]"
```

**Raz√≥n**: Los archivos `.env` contienen configuraciones cr√≠ticas y secretos que no deben ser modificados autom√°ticamente.

---

## üé® **ZEN DESIGN SYSTEM - REGLAS ESPEC√çFICAS**

### **üöÄ PRIORIDAD DE COMPONENTES**

```typescript
// ‚úÖ ORDEN DE PREFERENCIA:
1. ZEN Design System    ‚Üí import { ZenButton } from "@/components/ui/zen"
2. Shadcn (si no existe) ‚Üí import { Button } from "@/components/ui/shadcn/button"
3. Custom (√∫ltimo recurso) ‚Üí Solo si es absolutamente necesario
```

### **üìã COMPONENTES ZEN DISPONIBLES**

#### **Base Components**
- `ZenButton` - Bot√≥n unificado con loading states
- `ZenInput` - Input con label integrado y estados
- `ZenCard` - Contenedor con tema zinc
- `ZenBadge` - Badges sem√°nticos

#### **Form Components**
- `ZenTextarea` - Textarea con contador de caracteres
- `ZenFormSection` - Secci√≥n de formulario
- `ZenSelect` - Select con b√∫squeda (pr√≥ximamente)
- `ZenCheckbox` - Checkbox mejorado (pr√≥ximamente)

#### **Layout Components**
- `ZenSidebar` - Sidebar unificado (pr√≥ximamente)
- `ZenNavbar` - Navbar consistente (pr√≥ximamente)
- `ZenModal` - Modal est√°ndar (pr√≥ximamente)

### **üéØ PATRONES DE USO ZEN**

#### **Formularios**
```typescript
// ‚úÖ CORRECTO - Patr√≥n ZEN
import { ZenInput, ZenTextarea, ZenButton } from "@/components/ui/zen";

<form className="space-y-6">
  <ZenInput 
    label="Nombre"
    required
    error={errors.name}
    hint="Este nombre aparecer√° p√∫blicamente"
  />
  <ZenTextarea 
    label="Descripci√≥n"
    maxLength={500}
    minRows={3}
  />
  <ZenButton variant="primary" loading={saving}>
    Guardar
  </ZenButton>
</form>
```

#### **Cards y Contenedores**
```typescript
// ‚úÖ CORRECTO - Patr√≥n ZEN
import { 
  ZenCard, 
  ZenCardHeader, 
  ZenCardTitle, 
  ZenCardDescription, 
  ZenCardContent 
} from "@/components/ui/zen";

<ZenCard variant="default" padding="none">
  <ZenCardHeader>
    <ZenCardTitle>T√≠tulo de la Secci√≥n</ZenCardTitle>
    <ZenCardDescription>
      Descripci√≥n clara de la funcionalidad
    </ZenCardDescription>
  </ZenCardHeader>
  <ZenCardContent>
    {/* Contenido */}
  </ZenCardContent>
</ZenCard>
```

### **‚ö†Ô∏è REGLAS ESTRICTAS ZEN**

#### **‚ùå PROHIBIDO**
```typescript
// ‚ùå NO mezclar Shadcn directo cuando existe ZEN
import { Button } from "@/components/ui/button"; // Usar ZenButton
import { Input } from "@/components/ui/input";   // Usar ZenInput
import { Card } from "@/components/ui/card";     // Usar ZenCard

// ‚ùå NO hardcodear estilos que est√°n en tokens
<div className="bg-zinc-900 p-6"> // Usar ZenCard
<button className="bg-blue-600">  // Usar ZenButton
```

#### **‚úÖ PERMITIDO**
```typescript
// ‚úÖ OK - Componentes que no existen en ZEN (a√∫n)
import { Dialog } from "@/components/ui/shadcn/dialog";
import { Select } from "@/components/ui/shadcn/select";
import { Calendar } from "@/components/ui/shadcn/calendar";

// ‚úÖ OK - Usar design tokens directamente
import { ZEN_COLORS, ZEN_SPACING } from "@/components/ui/zen";
```

### **üîÑ MIGRACI√ìN A ZEN**

#### **Proceso Recomendado**
1. **Identificar** secci√≥n a migrar (ej: identidad)
2. **Analizar** componentes usados
3. **Crear** componentes ZEN faltantes
4. **Refactorizar** usando ZEN
5. **Probar** funcionalidad
6. **Commit** y crear branch espec√≠fico

#### **Naming Convention Branches**
```bash
# Para migraci√≥n de UI con ZEN
v1.1.ui.{seccion}     # ej: v1.1.ui.identidad
v1.1.ui.{componente}  # ej: v1.1.ui.sidebar
```

### **üìö DOCUMENTACI√ìN ZEN**

- **README**: `/src/components/ui/zen/README.md`
- **Listado**: `/docs/04-best-practices/ZEN_COMPONENTS_LISTADO.md`
- **Tokens**: `/src/components/ui/zen/tokens/`

---

**¬°Mant√©n el c√≥digo limpio, tipado y siguiendo ZEN Design System para consistencia m√°xima! üöÄ**
