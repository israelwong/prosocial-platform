# ZENPro - Cursor Rules (Optimizado)

## 🎯 PROYECTO CORE

**Stack:** Next.js 15 + TypeScript 5 + React 19 + Prisma + Supabase + Tailwind 4

**Arquitectura:** Multi-tenant SaaS para estudios fotográficos

## 🏗️ ESTRUCTURA

```
src/
├── app/              # Next.js App Router
├── components/ui/
│   ├── zen/         # ZEN Design System (USAR PRIMERO)
│   └── shadcn/      # Base components
├── lib/             # Utilities
└── types/           # TypeScript types
```

## 🎨 DISEÑO ZEN

**Tema:** Dark mode zinc (zinc-950/900/800)

**Componentes disponibles:**

- ZenButton, ZenInput, ZenCard, ZenTextarea
- ZenSidebar, ZenModal, ZenBadge

**Imports:**

```typescript
// ✅ SIEMPRE PRIMERO
import { ZenButton, ZenInput } from "@/components/ui/zen";

// Solo si no existe en ZEN
import { Dialog } from "@/components/ui/shadcn/dialog";
```

## 🔧 CÓDIGO

**TypeScript:**

- Strict mode enabled
- NO usar `any`
- Tipar todas las props

**React:**

- Componentes funcionales
- `"use client"` cuando necesario
- useCallback para funciones en deps
- useMemo para cálculos costosos

**Next.js:**

- Server Components por defecto
- API Routes en `app/api/`
- Dynamic routes con `[slug]`

## 🗄️ BASE DE DATOS

**Prisma:**

- Naming: camelCase para campos
- Índices en queries frecuentes
- Relaciones bien definidas

**Supabase:**

- Auth con @supabase/ssr
- RLS habilitado
- Client/Server separation

## 📝 CONVENCIONES

**Naming:**

- Archivos: kebab-case
- Componentes: PascalCase
- Variables: camelCase
- Constantes: UPPER_SNAKE_CASE

**Imports:**

```typescript
// 1. React/Next
import React from "react";
import { NextResponse } from "next/server";

// 2. Third-party
import { PrismaClient } from "@prisma/client";

// 3. ZEN (siempre primero)
import { ZenButton } from "@/components/ui/zen";

// 4. Local
import { LeadForm } from "./components/LeadForm";
```

## 🚨 PROHIBIDO

- ❌ Usar `any` en TypeScript
- ❌ Mutar props directamente
- ❌ useEffect sin deps correctas
- ❌ Hardcodear strings
- ❌ Prisma en client components
- ❌ Modificar archivos `.env*`
- ❌ Usar shadcn/ui si existe componente ZEN

## ✅ SIEMPRE HACER

- ✅ Usar ZEN Design System primero
- ✅ Tipado fuerte TypeScript
- ✅ Error handling con try/catch
- ✅ Loading states en acciones async
- ✅ Validación con Zod
- ✅ API routes para DB operations

## 🎯 PATRONES ZEN

**Formularios:**

```typescript
Guardar;
```

**Cards:**

```typescript
Título;

{
  /* Contenido */
}
```

## 🔒 SEGURIDAD

- Supabase Auth + JWT
- Middleware para rutas protegidas
- RLS en base de datos
- Validación cliente + servidor

## 📦 DEPENDENCIAS CLAVE

- next@15.5.2, react@19.1.0, typescript@5
- @prisma/client@6.15.0, @supabase/supabase-js@2.57.4
- tailwindcss@4, lucide-react, sonner

---

**Mantén código limpio, tipado y siguiendo ZEN Design System.**
