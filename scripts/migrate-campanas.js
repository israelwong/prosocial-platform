const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function runMigration() {
    try {
        console.log('üöÄ Iniciando migraci√≥n del sistema de campa√±as...');

        // Crear la tabla ProSocialCampa√±a
        console.log('üìã Creando tabla prosocial_campanas...');
        await prisma.$executeRawUnsafe(`
            CREATE TABLE "prosocial_campanas" (
                "id" TEXT NOT NULL,
                "nombre" TEXT NOT NULL,
                "descripcion" TEXT,
                "presupuestoTotal" DECIMAL(10,2) NOT NULL,
                "fechaInicio" TIMESTAMP(3) NOT NULL,
                "fechaFin" TIMESTAMP(3) NOT NULL,
                "isActive" BOOLEAN NOT NULL DEFAULT true,
                "status" TEXT NOT NULL DEFAULT 'planificada',
                "leadsGenerados" INTEGER NOT NULL DEFAULT 0,
                "leadsSuscritos" INTEGER NOT NULL DEFAULT 0,
                "gastoReal" DECIMAL(10,2) NOT NULL DEFAULT 0,
                "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP(3) NOT NULL,

                CONSTRAINT "prosocial_campanas_pkey" PRIMARY KEY ("id")
            );
        `);

        // Crear la tabla ProSocialPlataformaPublicidad
        console.log('üìã Creando tabla prosocial_plataformas_publicidad...');
        await prisma.$executeRawUnsafe(`
            CREATE TABLE "prosocial_plataformas_publicidad" (
                "id" TEXT NOT NULL,
                "nombre" TEXT NOT NULL,
                "descripcion" TEXT,
                "tipo" TEXT NOT NULL,
                "color" TEXT,
                "icono" TEXT,
                "isActive" BOOLEAN NOT NULL DEFAULT true,
                "orden" INTEGER NOT NULL DEFAULT 0,
                "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP(3) NOT NULL,

                CONSTRAINT "prosocial_plataformas_publicidad_pkey" PRIMARY KEY ("id")
            );
        `);

        // Crear la tabla ProSocialCampa√±aPlataforma
        console.log('üìã Creando tabla prosocial_campana_plataformas...');
        await prisma.$executeRawUnsafe(`
            CREATE TABLE "prosocial_campana_plataformas" (
                "id" TEXT NOT NULL,
                "campa√±aId" TEXT NOT NULL,
                "plataformaId" TEXT NOT NULL,
                "presupuesto" DECIMAL(10,2) NOT NULL,
                "gastoReal" DECIMAL(10,2) NOT NULL DEFAULT 0,
                "leads" INTEGER NOT NULL DEFAULT 0,
                "conversiones" INTEGER NOT NULL DEFAULT 0,
                "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
                "updatedAt" TIMESTAMP(3) NOT NULL,

                CONSTRAINT "prosocial_campana_plataformas_pkey" PRIMARY KEY ("id")
            );
        `);

        // Crear √≠ndices para prosocial_campanas
        console.log('üìã Creando √≠ndices para campa√±as...');
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_campanas_fechaInicio_fechaFin_idx" ON "prosocial_campanas"("fechaInicio", "fechaFin");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_campanas_status_idx" ON "prosocial_campanas"("status");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_campanas_isActive_idx" ON "prosocial_campanas"("isActive");`);

        // Crear √≠ndices para prosocial_plataformas_publicidad
        console.log('üìã Creando √≠ndices para plataformas...');
        await prisma.$executeRawUnsafe(`CREATE UNIQUE INDEX "prosocial_plataformas_publicidad_nombre_key" ON "prosocial_plataformas_publicidad"("nombre");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_plataformas_publicidad_tipo_idx" ON "prosocial_plataformas_publicidad"("tipo");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_plataformas_publicidad_isActive_idx" ON "prosocial_plataformas_publicidad"("isActive");`);

        // Crear √≠ndices para prosocial_campana_plataformas
        console.log('üìã Creando √≠ndices para campa√±a-plataformas...');
        await prisma.$executeRawUnsafe(`CREATE UNIQUE INDEX "prosocial_campana_plataformas_campa√±aId_plataformaId_key" ON "prosocial_campana_plataformas"("campa√±aId", "plataformaId");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_campana_plataformas_campa√±aId_idx" ON "prosocial_campana_plataformas"("campa√±aId");`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_campana_plataformas_plataformaId_idx" ON "prosocial_campana_plataformas"("plataformaId");`);

        // Agregar columna campa√±aId a la tabla prosocial_leads
        console.log('üìã Agregando columna campa√±aId a prosocial_leads...');
        await prisma.$executeRawUnsafe(`ALTER TABLE "prosocial_leads" ADD COLUMN "campa√±aId" TEXT;`);
        await prisma.$executeRawUnsafe(`CREATE INDEX "prosocial_leads_campa√±aId_idx" ON "prosocial_leads"("campa√±aId");`);

        // Agregar foreign keys
        console.log('üìã Agregando foreign keys...');
        await prisma.$executeRawUnsafe(`ALTER TABLE "prosocial_campana_plataformas" ADD CONSTRAINT "prosocial_campana_plataformas_campa√±aId_fkey" FOREIGN KEY ("campa√±aId") REFERENCES "prosocial_campanas"("id") ON DELETE CASCADE ON UPDATE CASCADE;`);
        await prisma.$executeRawUnsafe(`ALTER TABLE "prosocial_campana_plataformas" ADD CONSTRAINT "prosocial_campana_plataformas_plataformaId_fkey" FOREIGN KEY ("plataformaId") REFERENCES "prosocial_plataformas_publicidad"("id") ON DELETE RESTRICT ON UPDATE CASCADE;`);
        await prisma.$executeRawUnsafe(`ALTER TABLE "prosocial_leads" ADD CONSTRAINT "prosocial_leads_campa√±aId_fkey" FOREIGN KEY ("campa√±aId") REFERENCES "prosocial_campanas"("id") ON DELETE SET NULL ON UPDATE CASCADE;`);

        console.log('‚úÖ Tablas creadas exitosamente');

        // Verificar que todo funcion√≥
        const campanasCount = await prisma.proSocialCampa√±a.count();
        console.log(`üìà Total de campa√±as: ${campanasCount}`);

        const plataformasCount = await prisma.proSocialPlataformaPublicidad.count();
        console.log(`üìà Total de plataformas: ${plataformasCount}`);

        const leadsCount = await prisma.proSocialLead.count();
        console.log(`üë• Total de leads: ${leadsCount}`);

        console.log('üéâ Migraci√≥n completada exitosamente!');

    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar la migraci√≥n
runMigration()
    .then(() => {
        console.log('‚úÖ Migraci√≥n finalizada');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
