const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testCampanasAPI() {
    try {
        console.log('üß™ Probando API routes de campa√±as...');

        // Probar GET /api/plataformas
        console.log('üìä Probando GET /api/plataformas...');
        const plataformasResponse = await fetch(`${BASE_URL}/api/plataformas`);
        
        if (!plataformasResponse.ok) {
            throw new Error(`GET plataformas failed: ${plataformasResponse.status} ${plataformasResponse.statusText}`);
        }
        
        const plataformas = await plataformasResponse.json();
        console.log(`‚úÖ GET plataformas exitoso: ${plataformas.length} plataformas encontradas`);
        
        if (plataformas.length > 0) {
            console.log('üìã Primeras 3 plataformas:');
            plataformas.slice(0, 3).forEach((plataforma, index) => {
                console.log(`  ${index + 1}. ${plataforma.nombre} (${plataforma.tipo})`);
            });
        }

        // Probar GET /api/campanas
        console.log('\nüìä Probando GET /api/campanas...');
        const campanasResponse = await fetch(`${BASE_URL}/api/campanas`);
        
        if (!campanasResponse.ok) {
            throw new Error(`GET campanas failed: ${campanasResponse.status} ${campanasResponse.statusText}`);
        }
        
        const campanas = await campanasResponse.json();
        console.log(`‚úÖ GET campanas exitoso: ${campanas.length} campa√±as encontradas`);

        // Probar POST /api/campanas
        console.log('\nüîß Probando POST /api/campanas...');
        const nuevaCampa√±a = {
            nombre: 'Campa√±a API Test Q1 2024',
            descripcion: 'Campa√±a creada para testing de API',
            presupuestoTotal: 5000.00,
            fechaInicio: new Date('2024-01-01'),
            fechaFin: new Date('2024-03-31'),
            status: 'activa',
            isActive: true,
            leadsGenerados: 0,
            leadsSuscritos: 0,
            gastoReal: 0,
            plataformas: plataformas.slice(0, 2).map(p => ({
                plataformaId: p.id,
                presupuesto: 1000,
                gastoReal: 0,
                leads: 0,
                conversiones: 0
            }))
        };

        const postResponse = await fetch(`${BASE_URL}/api/campanas`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(nuevaCampa√±a),
        });

        if (!postResponse.ok) {
            throw new Error(`POST failed: ${postResponse.status} ${postResponse.statusText}`);
        }

        const campa√±aCreada = await postResponse.json();
        console.log(`‚úÖ POST exitoso: Campa√±a creada con ID ${campa√±aCreada.id}`);
        console.log(`üìã Campa√±a: ${campa√±aCreada.nombre}`);
        console.log(`üí∞ Presupuesto: $${campa√±aCreada.presupuestoTotal}`);
        console.log(`üìä Plataformas: ${campa√±aCreada.plataformas.length}`);

        // Probar GET /api/campanas/[id]
        console.log('\nüîç Probando GET /api/campanas/[id]...');
        const getCampa√±aResponse = await fetch(`${BASE_URL}/api/campanas/${campa√±aCreada.id}`);
        
        if (!getCampa√±aResponse.ok) {
            throw new Error(`GET campa√±a failed: ${getCampa√±aResponse.status} ${getCampa√±aResponse.statusText}`);
        }
        
        const campa√±aDetalle = await getCampa√±aResponse.json();
        console.log(`‚úÖ GET campa√±a exitoso: ${campa√±aDetalle.nombre}`);
        console.log(`üìä Leads asociados: ${campa√±aDetalle._count.leads}`);

        // Probar PUT /api/campanas/[id]
        console.log('\nüîÑ Probando PUT /api/campanas/[id]...');
        const campa√±aActualizada = {
            ...campa√±aCreada,
            leadsGenerados: 150,
            leadsSuscritos: 25,
            gastoReal: 2500.00,
            descripcion: 'Campa√±a actualizada para testing de API'
        };

        const putResponse = await fetch(`${BASE_URL}/api/campanas/${campa√±aCreada.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(campa√±aActualizada),
        });

        if (!putResponse.ok) {
            throw new Error(`PUT failed: ${putResponse.status} ${putResponse.statusText}`);
        }

        const campa√±aActualizadaResponse = await putResponse.json();
        console.log(`‚úÖ PUT exitoso: Campa√±a actualizada`);
        console.log(`üìä Leads generados: ${campa√±aActualizadaResponse.leadsGenerados}`);
        console.log(`üìä Leads suscritos: ${campa√±aActualizadaResponse.leadsSuscritos}`);
        console.log(`üí∞ Gasto real: $${campa√±aActualizadaResponse.gastoReal}`);

        // Calcular m√©tricas
        const costoAdquisicion = campa√±aActualizadaResponse.leadsGenerados > 0 ? 
            campa√±aActualizadaResponse.gastoReal / campa√±aActualizadaResponse.leadsGenerados : 0;
        const costoConversion = campa√±aActualizadaResponse.leadsSuscritos > 0 ? 
            campa√±aActualizadaResponse.gastoReal / campa√±aActualizadaResponse.leadsSuscritos : 0;
        const tasaConversion = campa√±aActualizadaResponse.leadsGenerados > 0 ? 
            (campa√±aActualizadaResponse.leadsSuscritos / campa√±aActualizadaResponse.leadsGenerados) * 100 : 0;

        console.log(`\nüìà M√©tricas calculadas:`);
        console.log(`  ‚Ä¢ Costo de adquisici√≥n: $${costoAdquisicion.toFixed(2)}`);
        console.log(`  ‚Ä¢ Costo de conversi√≥n: $${costoConversion.toFixed(2)}`);
        console.log(`  ‚Ä¢ Tasa de conversi√≥n: ${tasaConversion.toFixed(1)}%`);

        // Probar DELETE /api/campanas/[id]
        console.log('\nüóëÔ∏è Probando DELETE /api/campanas/[id]...');
        const deleteResponse = await fetch(`${BASE_URL}/api/campanas/${campa√±aCreada.id}`, {
            method: 'DELETE',
        });

        if (!deleteResponse.ok) {
            throw new Error(`DELETE failed: ${deleteResponse.status} ${deleteResponse.statusText}`);
        }

        console.log('‚úÖ DELETE exitoso: Campa√±a eliminada');

        // Verificar que la campa√±a fue eliminada
        console.log('\nüîç Verificando eliminaci√≥n...');
        const getResponseAfterDelete = await fetch(`${BASE_URL}/api/campanas`);
        const campanasAfterDelete = await getResponseAfterDelete.json();
        
        const campa√±aEliminada = campanasAfterDelete.find(c => c.id === campa√±aCreada.id);
        if (!campa√±aEliminada) {
            console.log('‚úÖ Verificaci√≥n exitosa: Campa√±a eliminada correctamente');
        } else {
            console.log('‚ùå Error: Campa√±a no fue eliminada');
        }

        console.log('\nüéâ Todas las pruebas de API de campa√±as exitosas!');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        throw error;
    }
}

// Ejecutar las pruebas
testCampanasAPI()
    .then(() => {
        console.log('‚úÖ Pruebas finalizadas');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
