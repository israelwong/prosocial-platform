/**
 * Script para debuggear el contexto de autenticaci√≥n
 * Simula exactamente lo que hace la aplicaci√≥n web
 */

const { PrismaClient } = require("@prisma/client");
const { createClient } = require("@supabase/supabase-js");
require("dotenv").config({ path: ".env.local" });

const prisma = new PrismaClient();
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Faltan variables de entorno");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugAuthContext() {
  console.log("üîç Debuggeando contexto de autenticaci√≥n...\n");

  try {
    // 1. Verificar si hay una sesi√≥n activa
    console.log("1Ô∏è‚É£ Verificando sesi√≥n activa...");
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession();

    if (sessionError) {
      console.log("‚ùå Error al obtener sesi√≥n:", sessionError.message);
    } else if (session) {
      console.log("‚úÖ Sesi√≥n activa encontrada:");
      console.log("   Usuario ID:", session.user.id);
      console.log("   Email:", session.user.email);
      console.log("   Expires at:", new Date(session.expires_at * 1000));
    } else {
      console.log("‚ùå No hay sesi√≥n activa");
    }

    // 2. Intentar autenticar
    console.log("\n2Ô∏è‚É£ Intentando autenticar...");
    const { data: authData, error: authError } =
      await supabase.auth.signInWithPassword({
        email: "owner@demo-studio.com",
        password: "Owner123!",
      });

    if (authError) {
      console.log("‚ùå Error de autenticaci√≥n:", authError.message);
      return;
    }

    console.log("‚úÖ Autenticaci√≥n exitosa:");
    console.log("   Usuario ID:", authData.user.id);
    console.log("   Email:", authData.user.email);
    console.log("   Sesi√≥n:", !!authData.session);

    // 3. Verificar sesi√≥n despu√©s de autenticar
    console.log("\n3Ô∏è‚É£ Verificando sesi√≥n despu√©s de autenticar...");
    const {
      data: { session: newSession },
      error: newSessionError,
    } = await supabase.auth.getSession();

    if (newSessionError) {
      console.log("‚ùå Error al obtener nueva sesi√≥n:", newSessionError.message);
    } else if (newSession) {
      console.log("‚úÖ Nueva sesi√≥n activa:");
      console.log("   Usuario ID:", newSession.user.id);
      console.log("   Email:", newSession.user.email);
      console.log("   Expires at:", new Date(newSession.expires_at * 1000));
    } else {
      console.log("‚ùå No hay nueva sesi√≥n activa");
    }

    // 4. Verificar usuario actual
    console.log("\n4Ô∏è‚É£ Verificando usuario actual...");
    const {
      data: { user },
      error: userError,
    } = await supabase.auth.getUser();

    if (userError) {
      console.log("‚ùå Error al obtener usuario:", userError.message);
    } else if (user) {
      console.log("‚úÖ Usuario actual:");
      console.log("   ID:", user.id);
      console.log("   Email:", user.email);
    } else {
      console.log("‚ùå No hay usuario actual");
    }

    // 5. Verificar en base de datos
    console.log("\n5Ô∏è‚É£ Verificando en base de datos...");
    const dbUser = await prisma.users.findUnique({
      where: { supabase_id: authData.user.id },
    });

    if (!dbUser) {
      console.log("‚ùå Usuario no encontrado en BD");
      console.log("   ID buscado:", authData.user.id);
      return;
    }

    console.log("‚úÖ Usuario encontrado en BD:");
    console.log("   ID:", dbUser.id);
    console.log("   Email:", dbUser.email);
    console.log("   Supabase ID:", dbUser.supabase_id);

    // 6. Verificar roles
    console.log("\n6Ô∏è‚É£ Verificando roles...");
    const userStudioRoles = await prisma.user_studio_roles.findMany({
      where: { user_id: dbUser.id },
      include: { studio: true },
    });

    console.log("   Roles encontrados:", userStudioRoles.length);
    userStudioRoles.forEach((role, index) => {
      console.log(
        `   ${index + 1}. Studio: ${role.studio.studio_name} (${role.studio.slug})`
      );
      console.log(`      Rol: ${role.role}`);
      console.log(`      Activo: ${role.is_active}`);
    });

    // 7. Verificar rol OWNER espec√≠ficamente
    console.log("\n7Ô∏è‚É£ Verificando rol OWNER...");
    const ownerRole = await prisma.user_studio_roles.findFirst({
      where: {
        user_id: dbUser.id,
        role: "OWNER",
      },
      include: { studio: true },
    });

    if (!ownerRole) {
      console.log("‚ùå No se encontr√≥ rol OWNER");
      return;
    }

    console.log("‚úÖ Rol OWNER encontrado:");
    console.log("   Studio:", ownerRole.studio.studio_name);
    console.log("   Studio ID:", ownerRole.studio.id);
    console.log("   Studio Slug:", ownerRole.studio.slug);

    console.log("\nüéØ RESUMEN:");
    console.log("‚úÖ Autenticaci√≥n exitosa");
    console.log("‚úÖ Usuario encontrado en BD");
    console.log("‚úÖ Rol OWNER encontrado");
    console.log("‚úÖ Studio encontrado");
    console.log("\nüîç El problema NO est√° en los datos de BD");
  } catch (error) {
    console.error("‚ùå Error inesperado:", error);
  } finally {
    await prisma.$disconnect();
  }
}

debugAuthContext().catch(console.error);
