const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCampanasHistorial() {
    try {
        console.log('üß™ Probando funcionalidad de historial de campa√±as...');

        // Crear algunas campa√±as de prueba con diferentes estados
        console.log('üîß Creando campa√±as de prueba...');
        
        const campa√±asPrueba = [
            {
                nombre: 'Campa√±a Q1 2024 - Fotograf√≠a',
                descripcion: 'Campa√±a de fotograf√≠a profesional Q1',
                presupuestoTotal: 5000.00,
                fechaInicio: new Date('2024-01-01'),
                fechaFin: new Date('2024-03-31'),
                status: 'finalizada',
                isActive: false,
                leadsGenerados: 200,
                leadsSuscritos: 40,
                gastoReal: 4500.00
            },
            {
                nombre: 'Campa√±a Q2 2024 - Video',
                descripcion: 'Campa√±a de video corporativo Q2',
                presupuestoTotal: 8000.00,
                fechaInicio: new Date('2024-04-01'),
                fechaFin: new Date('2024-06-30'),
                status: 'pausada',
                isActive: false,
                leadsGenerados: 150,
                leadsSuscritos: 25,
                gastoReal: 3200.00
            },
            {
                nombre: 'Campa√±a Q3 2024 - Social Media',
                descripcion: 'Campa√±a de redes sociales Q3',
                presupuestoTotal: 3000.00,
                fechaInicio: new Date('2024-07-01'),
                fechaFin: new Date('2024-09-30'),
                status: 'planificada',
                isActive: false,
                leadsGenerados: 0,
                leadsSuscritos: 0,
                gastoReal: 0
            }
        ];

        const campa√±asCreadas = [];
        for (const campa√±aData of campa√±asPrueba) {
            const campa√±a = await prisma.proSocialCampa√±a.create({
                data: campa√±aData
            });
            campa√±asCreadas.push(campa√±a);
            console.log(`‚úÖ Campa√±a creada: ${campa√±a.nombre} (${campa√±a.status})`);
        }

        // Probar consultas de historial
        console.log('\nüìä Probando consultas de historial...');
        
        // Campa√±as inactivas (historial)
        const campanasHistorial = await prisma.proSocialCampa√±a.findMany({
            where: {
                isActive: false
            },
            include: {
                plataformas: {
                    include: {
                        plataforma: true
                    }
                },
                _count: {
                    select: {
                        leads: true
                    }
                }
            },
            orderBy: [
                { fechaInicio: 'desc' },
                { createdAt: 'desc' }
            ]
        });

        console.log(`‚úÖ Campa√±as en historial: ${campanasHistorial.length}`);

        // Filtrar por estado
        const campanasFinalizadas = campanasHistorial.filter(c => c.status === 'finalizada');
        const campanasPausadas = campanasHistorial.filter(c => c.status === 'pausada');
        const campanasPlanificadas = campanasHistorial.filter(c => c.status === 'planificada');

        console.log(`üìã Campa√±as finalizadas: ${campanasFinalizadas.length}`);
        console.log(`üìã Campa√±as pausadas: ${campanasPausadas.length}`);
        console.log(`üìã Campa√±as planificadas: ${campanasPlanificadas.length}`);

        // Calcular estad√≠sticas generales
        console.log('\nüìà Calculando estad√≠sticas generales...');
        
        const totalPresupuesto = campanasHistorial.reduce((sum, c) => sum + c.presupuestoTotal, 0);
        const totalGasto = campanasHistorial.reduce((sum, c) => sum + c.gastoReal, 0);
        const totalLeads = campanasHistorial.reduce((sum, c) => sum + c.leadsGenerados, 0);
        const totalConversiones = campanasHistorial.reduce((sum, c) => sum + c.leadsSuscritos, 0);
        const promedioConversion = totalLeads > 0 ? (totalConversiones / totalLeads) * 100 : 0;

        console.log(`üí∞ Presupuesto total: $${totalPresupuesto.toLocaleString()}`);
        console.log(`üí∏ Gasto total: $${totalGasto.toLocaleString()}`);
        console.log(`üë• Total leads: ${totalLeads}`);
        console.log(`üéØ Total conversiones: ${totalConversiones}`);
        console.log(`üìä Tasa de conversi√≥n promedio: ${promedioConversion.toFixed(1)}%`);

        // Calcular m√©tricas por campa√±a
        console.log('\nüìä M√©tricas por campa√±a:');
        campanasHistorial.forEach((campa√±a, index) => {
            const costoAdquisicion = campa√±a.leadsGenerados > 0 ? campa√±a.gastoReal / campa√±a.leadsGenerados : 0;
            const costoConversion = campa√±a.leadsSuscritos > 0 ? campa√±a.gastoReal / campa√±a.leadsSuscritos : 0;
            const tasaConversion = campa√±a.leadsGenerados > 0 ? (campa√±a.leadsSuscritos / campa√±a.leadsGenerados) * 100 : 0;
            const roi = campa√±a.presupuestoTotal > 0 ? ((campa√±a.gastoReal / campa√±a.presupuestoTotal) * 100) : 0;

            console.log(`\n${index + 1}. ${campa√±a.nombre} (${campa√±a.status}):`);
            console.log(`   ‚Ä¢ Costo adquisici√≥n: $${costoAdquisicion.toFixed(2)}`);
            console.log(`   ‚Ä¢ Costo conversi√≥n: $${costoConversion.toFixed(2)}`);
            console.log(`   ‚Ä¢ Tasa conversi√≥n: ${tasaConversion.toFixed(1)}%`);
            console.log(`   ‚Ä¢ ROI: ${roi.toFixed(1)}%`);

            // Clasificar rendimiento
            let rendimiento = 'Baja';
            if (tasaConversion >= 20) rendimiento = 'Excelente';
            else if (tasaConversion >= 10) rendimiento = 'Buena';
            else if (tasaConversion >= 5) rendimiento = 'Regular';

            console.log(`   ‚Ä¢ Rendimiento: ${rendimiento}`);
        });

        // Probar filtros por per√≠odo
        console.log('\nüìÖ Probando filtros por per√≠odo...');
        
        const now = new Date();
        const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
        const last3Months = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());

        const campanasLastMonth = campanasHistorial.filter(c => new Date(c.fechaInicio) >= lastMonth);
        const campanasLast3Months = campanasHistorial.filter(c => new Date(c.fechaInicio) >= last3Months);

        console.log(`üìã Campa√±as √∫ltimo mes: ${campanasLastMonth.length}`);
        console.log(`üìã Campa√±as √∫ltimos 3 meses: ${campanasLast3Months.length}`);

        // Limpiar datos de prueba
        console.log('\nüßπ Limpiando datos de prueba...');
        for (const campa√±a of campa√±asCreadas) {
            await prisma.proSocialCampa√±a.delete({
                where: { id: campa√±a.id }
            });
        }
        console.log('‚úÖ Campa√±as de prueba eliminadas');

        console.log('\nüéâ Todas las pruebas de historial exitosas!');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar las pruebas
testCampanasHistorial()
    .then(() => {
        console.log('‚úÖ Pruebas finalizadas');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
