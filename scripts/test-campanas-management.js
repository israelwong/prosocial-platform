const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCampanasManagement() {
    try {
        console.log('üß™ Probando funcionalidades de gesti√≥n de campa√±as...');

        // Obtener una campa√±a para probar las funcionalidades
        const campa√±a = await prisma.proSocialCampa√±a.findFirst({
            include: {
                plataformas: {
                    include: {
                        plataforma: true
                    }
                }
            }
        });

        if (!campa√±a) {
            console.log('‚ùå No hay campa√±as para probar');
            return;
        }

        console.log(`üìã Campa√±a seleccionada: ${campa√±a.nombre} (${campa√±a.status})`);

        // Probar duplicaci√≥n
        console.log('\nüîß Probando duplicaci√≥n de campa√±a...');
        const campa√±aDuplicada = await prisma.proSocialCampa√±a.create({
            data: {
                nombre: `${campa√±a.nombre} (Copia)`,
                descripcion: campa√±a.descripcion,
                presupuestoTotal: campa√±a.presupuestoTotal,
                fechaInicio: new Date(),
                fechaFin: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 d√≠as
                status: 'planificada',
                isActive: true,
                leadsGenerados: 0,
                leadsSuscritos: 0,
                gastoReal: 0,
                plataformas: {
                    create: campa√±a.plataformas.map(p => ({
                        plataformaId: p.plataforma.id,
                        presupuesto: p.presupuesto,
                        gastoReal: 0,
                        leads: 0,
                        conversiones: 0
                    }))
                }
            },
            include: {
                plataformas: {
                    include: {
                        plataforma: true
                    }
                }
            }
        });

        console.log(`‚úÖ Campa√±a duplicada: ${campa√±aDuplicada.nombre}`);
        console.log(`üìä Plataformas duplicadas: ${campa√±aDuplicada.plataformas.length}`);

        // Probar archivado
        console.log('\nüîß Probando archivado de campa√±a...');
        const campa√±aArchivada = await prisma.proSocialCampa√±a.update({
            where: { id: campa√±aDuplicada.id },
            data: {
                isActive: false,
                status: 'finalizada'
            }
        });

        console.log(`‚úÖ Campa√±a archivada: ${campa√±aArchivada.nombre} (${campa√±aArchivada.status})`);

        // Verificar que aparece en historial
        console.log('\nüìä Verificando que aparece en historial...');
        const campanasHistorial = await prisma.proSocialCampa√±a.findMany({
            where: { isActive: false },
            select: { id: true, nombre: true, status: true }
        });

        const enHistorial = campanasHistorial.find(c => c.id === campa√±aDuplicada.id);
        if (enHistorial) {
            console.log(`‚úÖ Campa√±a archivada aparece en historial: ${enHistorial.nombre}`);
        } else {
            console.log('‚ùå Campa√±a archivada no aparece en historial');
        }

        // Probar eliminaci√≥n
        console.log('\nüóëÔ∏è Probando eliminaci√≥n de campa√±a...');
        await prisma.proSocialCampa√±a.delete({
            where: { id: campa√±aDuplicada.id }
        });

        console.log('‚úÖ Campa√±a eliminada exitosamente');

        // Verificar que ya no existe
        const campa√±aEliminada = await prisma.proSocialCampa√±a.findUnique({
            where: { id: campa√±aDuplicada.id }
        });

        if (!campa√±aEliminada) {
            console.log('‚úÖ Verificaci√≥n: Campa√±a eliminada correctamente');
        } else {
            console.log('‚ùå Error: Campa√±a no fue eliminada');
        }

        // Probar filtros por estado
        console.log('\nüîç Probando filtros por estado...');
        
        const campanasActivas = await prisma.proSocialCampa√±a.count({
            where: { isActive: true }
        });
        console.log(`üìä Campa√±as activas: ${campanasActivas}`);

        const campanasFinalizadas = await prisma.proSocialCampa√±a.count({
            where: { status: 'finalizada' }
        });
        console.log(`üìä Campa√±as finalizadas: ${campanasFinalizadas}`);

        const campanasPausadas = await prisma.proSocialCampa√±a.count({
            where: { status: 'pausada' }
        });
        console.log(`üìä Campa√±as pausadas: ${campanasPausadas}`);

        const campanasPlanificadas = await prisma.proSocialCampa√±a.count({
            where: { status: 'planificada' }
        });
        console.log(`üìä Campa√±as planificadas: ${campanasPlanificadas}`);

        console.log('\nüéâ Todas las pruebas de gesti√≥n exitosas!');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar las pruebas
testCampanasManagement()
    .then(() => {
        console.log('‚úÖ Pruebas finalizadas');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
