const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
    try {
        console.log('üß™ Probando conexi√≥n a Supabase...');

        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
        const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY;

        console.log('üìã Variables de entorno:');
        console.log(`  ‚Ä¢ URL: ${supabaseUrl ? '‚úÖ Definida' : '‚ùå No definida'}`);
        console.log(`  ‚Ä¢ Key: ${supabaseKey ? '‚úÖ Definida' : '‚ùå No definida'}`);

        if (!supabaseUrl || !supabaseKey) {
            throw new Error('Variables de entorno de Supabase no definidas');
        }

        const supabase = createClient(supabaseUrl, supabaseKey);

        // Probar conexi√≥n b√°sica
        console.log('\nüîå Probando conexi√≥n b√°sica...');
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        
        if (authError && authError.message !== 'Auth session missing!') {
            console.log('‚ö†Ô∏è Error de autenticaci√≥n (esperado):', authError.message);
        } else {
            console.log('‚úÖ Conexi√≥n b√°sica exitosa');
        }

        // Probar consulta a la tabla de canales
        console.log('\nüìä Probando consulta a canales...');
        const { data: canales, error: canalesError } = await supabase
            .from('prosocial_canales_adquisicion')
            .select('*')
            .limit(5);

        if (canalesError) {
            console.error('‚ùå Error en consulta de canales:', canalesError);
            throw canalesError;
        }

        console.log(`‚úÖ Consulta exitosa: ${canales.length} canales encontrados`);
        
        if (canales.length > 0) {
            console.log('\nüìã Primeros canales:');
            canales.forEach((canal, index) => {
                console.log(`  ${index + 1}. ${canal.nombre} (${canal.categoria})`);
            });
        }

        // Probar consulta con ordenamiento
        console.log('\nüîÑ Probando consulta con ordenamiento...');
        const { data: canalesOrdenados, error: ordenError } = await supabase
            .from('prosocial_canales_adquisicion')
            .select('*')
            .order('categoria', { ascending: true })
            .order('orden', { ascending: true })
            .limit(3);

        if (ordenError) {
            console.error('‚ùå Error en consulta ordenada:', ordenError);
            throw ordenError;
        }

        console.log(`‚úÖ Consulta ordenada exitosa: ${canalesOrdenados.length} canales`);
        
        if (canalesOrdenados.length > 0) {
            console.log('\nüìã Canales ordenados:');
            canalesOrdenados.forEach((canal, index) => {
                console.log(`  ${index + 1}. ${canal.nombre} (${canal.categoria}) - Orden: ${canal.orden}`);
            });
        }

        console.log('\nüéâ Todas las pruebas de conexi√≥n exitosas!');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        throw error;
    }
}

// Ejecutar las pruebas
testSupabaseConnection()
    .then(() => {
        console.log('‚úÖ Pruebas finalizadas');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
