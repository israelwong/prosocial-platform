const { exec } = require("child_process");
const path = require("path");

async function runScript(scriptPath) {
  return new Promise((resolve, reject) => {
    console.log(`\nüöÄ Ejecutando: ${scriptPath}`);
    console.log("=".repeat(60));

    const child = exec(`node ${scriptPath}`, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå Error ejecutando ${scriptPath}:`, error);
        reject(error);
        return;
      }

      if (stderr) {
        console.error(`‚ö†Ô∏è  Warnings en ${scriptPath}:`, stderr);
      }

      console.log(stdout);
      resolve();
    });

    // Mostrar output en tiempo real
    child.stdout.on("data", (data) => {
      process.stdout.write(data);
    });

    child.stderr.on("data", (data) => {
      process.stderr.write(data);
    });
  });
}

async function setupPlansAndServices() {
  try {
    console.log("üéØ Iniciando configuraci√≥n completa de planes y servicios");
    console.log("üìã Este proceso incluye:");
    console.log("   1. Limpieza y recreaci√≥n de categor√≠as y servicios");
    console.log("   2. Limpieza y recreaci√≥n de planes con precios");
    console.log("   3. Configuraci√≥n de relaciones plan-servicio");

    const scriptsDir = __dirname;

    // Paso 1: Limpiar y recrear servicios
    await runScript(path.join(scriptsDir, "cleanup-and-recreate-services.js"));

    // Paso 2: Limpiar y recrear planes
    await runScript(path.join(scriptsDir, "cleanup-and-recreate-plans.js"));

    console.log("\nüéâ ¬°Configuraci√≥n completa finalizada exitosamente!");
    console.log("\nüìä Resumen de lo que se ha configurado:");
    console.log("   ‚úÖ Categor√≠as de servicios organizadas por funcionalidad");
    console.log("   ‚úÖ Servicios espec√≠ficos para cada categor√≠a");
    console.log("   ‚úÖ Plan Personal: $399/mes, $3999/a√±o");
    console.log("   ‚úÖ Plan Pro: $599/mes, $5999/a√±o (Popular)");
    console.log("   ‚úÖ Plan Premium: $999/mes, $9999/a√±o");
    console.log("   ‚úÖ Relaciones plan-servicio configuradas seg√∫n la tabla");

    console.log("\nüîó Pr√≥ximos pasos recomendados:");
    console.log(
      "   1. Verificar la configuraci√≥n en el panel de administraci√≥n"
    );
    console.log(
      "   2. Configurar productos de Stripe con los precios definidos"
    );
    console.log("   3. Probar la funcionalidad de suscripciones");
  } catch (error) {
    console.error("\n‚ùå Error durante la configuraci√≥n:", error);
    process.exit(1);
  }
}

// Ejecutar el script maestro
setupPlansAndServices()
  .then(() => {
    console.log("\n‚úÖ Proceso maestro completado");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Error en proceso maestro:", error);
    process.exit(1);
  });
