const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCampanasModels() {
    try {
        console.log('üß™ Probando modelos de campa√±as...');

        // Probar plataformas
        console.log('üìä Probando plataformas de publicidad...');
        const plataformas = await prisma.proSocialPlataformaPublicidad.findMany({
            orderBy: [
                { tipo: 'asc' },
                { orden: 'asc' }
            ]
        });

        console.log(`‚úÖ Total de plataformas: ${plataformas.length}`);

        // Mostrar plataformas por tipo
        const tipos = [...new Set(plataformas.map(p => p.tipo))];
        tipos.forEach(tipo => {
            const plataformasTipo = plataformas.filter(p => p.tipo === tipo);
            console.log(`\nüìÇ ${tipo} (${plataformasTipo.length} plataformas):`);
            plataformasTipo.forEach(plataforma => {
                console.log(`  ‚Ä¢ ${plataforma.nombre} ${plataforma.isActive ? '‚úÖ' : '‚ùå'}`);
            });
        });

        // Crear una campa√±a de prueba
        console.log('\nüîß Probando creaci√≥n de campa√±a...');
        const campa√±aPrueba = await prisma.proSocialCampa√±a.create({
            data: {
                nombre: 'Campa√±a de Prueba Q1 2024',
                descripcion: 'Campa√±a creada para testing',
                presupuestoTotal: 5000.00,
                fechaInicio: new Date('2024-01-01'),
                fechaFin: new Date('2024-03-31'),
                status: 'activa',
                leadsGenerados: 0,
                leadsSuscritos: 0,
                gastoReal: 0
            }
        });

        console.log(`‚úÖ Campa√±a creada: ${campa√±aPrueba.nombre} (ID: ${campa√±aPrueba.id})`);

        // Asignar plataformas a la campa√±a
        console.log('\nüîó Probando asignaci√≥n de plataformas...');
        const plataformasSeleccionadas = plataformas.slice(0, 3); // Tomar las primeras 3

        for (const plataforma of plataformasSeleccionadas) {
            const presupuesto = Math.floor(Math.random() * 1000) + 500; // Presupuesto aleatorio entre 500-1500
            
            const campa√±aPlataforma = await prisma.proSocialCampa√±aPlataforma.create({
                data: {
                    campa√±aId: campa√±aPrueba.id,
                    plataformaId: plataforma.id,
                    presupuesto: presupuesto,
                    gastoReal: 0,
                    leads: 0,
                    conversiones: 0
                }
            });

            console.log(`  ‚úÖ ${plataforma.nombre}: $${presupuesto} asignados`);
        }

        // Probar consultas con relaciones
        console.log('\nüîç Probando consultas con relaciones...');
        const campa√±aConPlataformas = await prisma.proSocialCampa√±a.findUnique({
            where: { id: campa√±aPrueba.id },
            include: {
                plataformas: {
                    include: {
                        plataforma: true
                    }
                }
            }
        });

        if (campa√±aConPlataformas) {
            console.log(`üìã Campa√±a: ${campa√±aConPlataformas.nombre}`);
            console.log(`üí∞ Presupuesto total: $${campa√±aConPlataformas.presupuestoTotal}`);
            console.log(`üìÖ Per√≠odo: ${campa√±aConPlataformas.fechaInicio.toLocaleDateString()} - ${campa√±aConPlataformas.fechaFin.toLocaleDateString()}`);
            console.log(`üìä Plataformas asignadas: ${campa√±aConPlataformas.plataformas.length}`);
            
            campa√±aConPlataformas.plataformas.forEach(cp => {
                console.log(`  ‚Ä¢ ${cp.plataforma.nombre}: $${cp.presupuesto} (${cp.plataforma.tipo})`);
            });
        }

        // Probar actualizaci√≥n de m√©tricas
        console.log('\nüìà Probando actualizaci√≥n de m√©tricas...');
        const campa√±aActualizada = await prisma.proSocialCampa√±a.update({
            where: { id: campa√±aPrueba.id },
            data: {
                leadsGenerados: 150,
                leadsSuscritos: 25,
                gastoReal: 2500.00
            }
        });

        console.log(`‚úÖ M√©tricas actualizadas:`);
        console.log(`  ‚Ä¢ Leads generados: ${campa√±aActualizada.leadsGenerados}`);
        console.log(`  ‚Ä¢ Leads suscritos: ${campa√±aActualizada.leadsSuscritos}`);
        console.log(`  ‚Ä¢ Gasto real: $${campa√±aActualizada.gastoReal}`);

        // Calcular m√©tricas
        const costoAdquisicion = campa√±aActualizada.gastoReal / campa√±aActualizada.leadsGenerados;
        const costoConversion = campa√±aActualizada.gastoReal / campa√±aActualizada.leadsSuscritos;
        const tasaConversion = (campa√±aActualizada.leadsSuscritos / campa√±aActualizada.leadsGenerados) * 100;

        console.log(`\nüìä M√©tricas calculadas:`);
        console.log(`  ‚Ä¢ Costo de adquisici√≥n: $${costoAdquisicion.toFixed(2)}`);
        console.log(`  ‚Ä¢ Costo de conversi√≥n: $${costoConversion.toFixed(2)}`);
        console.log(`  ‚Ä¢ Tasa de conversi√≥n: ${tasaConversion.toFixed(1)}%`);

        // Limpiar datos de prueba
        console.log('\nüßπ Limpiando datos de prueba...');
        await prisma.proSocialCampa√±a.delete({
            where: { id: campa√±aPrueba.id }
        });
        console.log('‚úÖ Campa√±a de prueba eliminada');

        console.log('\nüéâ Todas las pruebas de modelos exitosas!');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar las pruebas
testCampanasModels()
    .then(() => {
        console.log('‚úÖ Pruebas finalizadas');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
