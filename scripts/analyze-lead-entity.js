const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeLeadEntity() {
    try {
        console.log('üîç Analizando entidad ProSocialLead y elementos relacionados...\n');

        // 1. Verificar campos de ProSocialLead
        console.log('üìã CAMPOS DE ProSocialLead:');
        const leadFields = [
            'id', 'nombre', 'email', 'telefono', 'nombreEstudio', 'slugEstudio',
            'etapaId', 'fechaUltimoContacto', 'planInteres', 'presupuestoMensual',
            'fechaProbableInicio', 'agentId', 'puntaje', 'prioridad',
            'canalAdquisicionId', 'campa√±aId', 'fechaConversion', 'studioId',
            'createdAt', 'updatedAt'
        ];
        
        leadFields.forEach(field => {
            console.log(`  ‚úÖ ${field}`);
        });

        // 2. Verificar relaciones existentes
        console.log('\nüîó RELACIONES EXISTENTES:');
        const relations = [
            'agent (ProSocialAgent)',
            'etapa (ProSocialPipelineStage)',
            'canalAdquisicion (ProSocialCanalAdquisicion)',
            'campa√±a (ProSocialCampa√±a)',
            'studio (Studio)',
            'actividades (ProSocialActivity[])',
            'notifications (ProSocialNotification[])',
            'bitacora (ProSocialLeadBitacora[])'
        ];
        
        relations.forEach(relation => {
            console.log(`  ‚úÖ ${relation}`);
        });

        // 3. Verificar modelos relacionados
        console.log('\nüìä MODELOS RELACIONADOS:');
        
        // Verificar ProSocialLeadBitacora
        const bitacoraFields = [
            'id', 'leadId', 'tipo', 'titulo', 'descripcion', 'metadata',
            'usuarioId', 'createdAt', 'updatedAt'
        ];
        console.log('  üìù ProSocialLeadBitacora:');
        bitacoraFields.forEach(field => {
            console.log(`    ‚úÖ ${field}`);
        });

        // Verificar Agenda
        const agendaFields = [
            'id', 'studioId', 'userId', 'eventoId', 'concepto', 'descripcion',
            'googleMapsUrl', 'direccion', 'fecha', 'hora', 'status',
            'agendaTipo', 'createdAt', 'updatedAt'
        ];
        console.log('  üìÖ Agenda:');
        agendaFields.forEach(field => {
            console.log(`    ‚úÖ ${field}`);
        });

        // 4. Elementos faltantes identificados
        console.log('\n‚ùå ELEMENTOS FALTANTES IDENTIFICADOS:');
        
        const missingElements = [
            'Relaci√≥n directa entre ProSocialLead y Agenda',
            'Tipos de citas espec√≠ficos para leads (demostraci√≥n, consulta, soporte)',
            'Sistema de recordatorios autom√°ticos',
            'Integraci√≥n con notificaciones para citas',
            'Campos de seguimiento avanzado (√∫ltima actividad, pr√≥xima acci√≥n)',
            'Sistema de scoring autom√°tico basado en actividades',
            'Plantillas de comunicaci√≥n por etapa',
            'Integraci√≥n con WhatsApp Business API',
            'Sistema de seguimiento de emails enviados',
            'M√©tricas de engagement por lead'
        ];
        
        missingElements.forEach(element => {
            console.log(`  ‚ùå ${element}`);
        });

        // 5. Propuestas de mejora
        console.log('\nüí° PROPUESTAS DE MEJORA:');
        
        const improvements = [
            'Crear tabla ProSocialLeadCita para relacionar leads con citas',
            'Agregar campo tipoCita en Agenda (demostracion, consulta, soporte, seguimiento)',
            'Implementar sistema de recordatorios autom√°ticos',
            'Crear plantillas de comunicaci√≥n por etapa del pipeline',
            'Agregar m√©tricas de engagement (tiempo de respuesta, frecuencia de contacto)',
            'Implementar scoring autom√°tico basado en actividades',
            'Crear sistema de seguimiento de emails y llamadas',
            'Integrar con WhatsApp Business API para comunicaci√≥n',
            'Agregar dashboard de m√©tricas por lead',
            'Implementar sistema de alertas por inactividad'
        ];
        
        improvements.forEach(improvement => {
            console.log(`  üí° ${improvement}`);
        });

        // 6. Verificar datos de prueba
        console.log('\nüß™ VERIFICANDO DATOS DE PRUEBA:');
        
        const leadCount = await prisma.proSocialLead.count();
        console.log(`  üìä Total de leads: ${leadCount}`);
        
        const agentCount = await prisma.proSocialAgent.count();
        console.log(`  üë• Total de agentes: ${agentCount}`);
        
        const canalCount = await prisma.proSocialCanalAdquisicion.count();
        console.log(`  üì° Total de canales: ${canalCount}`);
        
        const etapaCount = await prisma.proSocialPipelineStage.count();
        console.log(`  üîÑ Total de etapas: ${etapaCount}`);
        
        const agendaCount = await prisma.agenda.count();
        console.log(`  üìÖ Total de citas: ${agendaCount}`);

        console.log('\n‚úÖ An√°lisis completado');

    } catch (error) {
        console.error('‚ùå Error durante el an√°lisis:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar el an√°lisis
analyzeLeadEntity()
    .then(() => {
        console.log('‚úÖ An√°lisis finalizado');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
