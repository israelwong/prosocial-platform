{
  "name": "zen-button",
  "type": "component",
  "files": [
    {
      "name": "zen-button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\nimport { ZEN_COLORS, ZEN_SPACING } from \"@/components/ui/zen/tokens\"\n\nconst zenButtonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        primary: cn(\n          ZEN_COLORS.button.primary.bg,\n          ZEN_COLORS.button.primary.hover,\n          ZEN_COLORS.button.primary.text\n        ),\n        secondary: cn(\n          ZEN_COLORS.button.secondary.bg,\n          ZEN_COLORS.button.secondary.hover,\n          ZEN_COLORS.button.secondary.text\n        ),\n        destructive: cn(\n          ZEN_COLORS.button.destructive.bg,\n          ZEN_COLORS.button.destructive.hover,\n          ZEN_COLORS.button.destructive.text\n        ),\n        outline: cn(\n          ZEN_COLORS.button.outline.bg,\n          ZEN_COLORS.button.outline.hover,\n          ZEN_COLORS.button.outline.text\n        ),\n        ghost: cn(\n          ZEN_COLORS.button.ghost.bg,\n          ZEN_COLORS.button.ghost.hover,\n          ZEN_COLORS.button.ghost.text\n        )\n      },\n      size: {\n        sm: cn(ZEN_SPACING.button.sm),\n        md: cn(ZEN_SPACING.button.md),\n        lg: cn(ZEN_SPACING.button.lg)\n      }\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"md\"\n    }\n  }\n)\n\nexport interface ZenButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof zenButtonVariants> {\n  asChild?: boolean\n  loading?: boolean\n  loadingText?: string\n}\n\nconst ZenButton = React.forwardRef<HTMLButtonElement, ZenButtonProps>(\n  ({ className, variant, size, asChild = false, loading = false, loadingText = \"Cargando...\", children, disabled, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    \n    return (\n      <Comp\n        className={cn(zenButtonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading ? (\n          <>\n            <svg className=\"mr-2 h-4 w-4 animate-spin\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n            </svg>\n            {loadingText}\n          </>\n        ) : (\n          children\n        )}\n      </Comp>\n    )\n  }\n)\nZenButton.displayName = \"ZenButton\"\n\nexport { ZenButton, zenButtonVariants }",
      "type": "tsx"
    }
  ],
  "dependencies": ["@radix-ui/react-slot", "class-variance-authority"],
  "registryDependencies": [],
  "description": "Botón unificado del ZEN Design System con tema oscuro zinc, variantes semánticas y estados de loading integrados.",
  "keywords": ["button", "zen", "design-system", "loading", "variants"]
}
